#define CT std::complex<T>

#ifndef TMV_INST_SKIP_BLAS
#undef BLAS
#undef ELAP
#undef BLAS_MaxAbs
#undef BLAS_SumAbsElements
#undef BLAS_SumAbsElements_complex
#undef BLAS_Norm2
#endif

#ifndef BLAS
#define Def1(T,C) \
  template void InstCopy(const ConstVectorView<T,UNKNOWN,C>& v1, \
      VectorView<T > v2); \
  template void InstSwap(VectorView<T,UNKNOWN,C> v1, VectorView<T > v2); \

Def1(T,false)
#ifdef TMV_INST_COMPLEX
Def1(CT,false)
Def1(CT,true)
#endif

#undef Def1
#endif // BLAS

#ifdef TMV_INST_MIX
template void InstCopy(const ConstVectorView<T >& v1, VectorView<CT > v2); 
#endif

#ifndef ELAP
#define Def2(T) \
  template void InstConjugateSelf(VectorView<T > v); \

#ifdef TMV_INST_COMPLEX
Def2(CT)
#endif

#undef Def2
#endif // ELAP

#define Def3(RT,T) \
  template void InstReverseSelf(VectorView<T > v); \
  template T InstSumElements(const ConstVectorView<T >& v); \
  template T InstMaxElement(const ConstVectorView<T >& v, int*const imax); \
  template T InstMinElement(const ConstVectorView<T >& v, int*const imin); \
  template RT InstNormSq(const ConstVectorView<T >& v);  \
  template RT InstNormSq(const ConstVectorView<T >& v, const RT scale);  \
  template void InstSort(VectorView<T > v, ADType ad, CompType comp); \
  template void InstSort(VectorView<T > v, int* P, ADType ad, CompType comp); \
  template void InstWrite(std::ostream& os, const ConstVectorView<T >& v); \
  template void InstWrite( \
      std::ostream& os, const ConstVectorView<T,UNKNOWN,true>& v); \
  template void InstWrite( \
      std::ostream& os, const ConstVectorView<T >& v, RT thresh); \
  template void InstWrite(std::ostream& os, \
      const ConstVectorView<T,UNKNOWN,true>& v, RT thresh); \
  template void InstRead(std::istream& is, VectorView<T > v); \
  template void InstRead( \
      std::istream& is, VectorView<T,UNKNOWN,true> v); \

Def3(T,T)
#ifdef TMV_INST_COMPLEX
Def3(T,CT)
#endif

#undef Def3

#ifndef BLAS_SumAbsElements
  template T InstSumAbsElements(const ConstVectorView<T >& v); 
  template T InstSumAbs2Elements(const ConstVectorView<T >& v); 
  template T InstSumAbs2Elements(const ConstVectorView<CT >& v); 
#endif
#ifdef TMV_INST_COMPLEX
#ifndef BLAS_SumAbsElements_complex
  template T InstSumAbsElements(const ConstVectorView<CT >& v); 
#endif
#endif

#ifndef BLASIDAMAX
  template T InstMaxAbsElement(const ConstVectorView<T >& v, int*const imax); 
  template T InstMaxAbs2Element(const ConstVectorView<T >& v, int*const imax); 
#ifdef TMV_INST_COMPLEX
  template T InstMaxAbs2Element(const ConstVectorView<CT >& v, int*const imax);
#endif
#endif
  template T InstMaxAbsElement(const ConstVectorView<CT >& v, int*const imax);

#ifndef BLASIDAMIN
  template T InstMinAbsElement(const ConstVectorView<T >& v, int*const imin); 
  template T InstMinAbs2Element(const ConstVectorView<T >& v, int*const imin); 
#ifdef TMV_INST_COMPLEX
  template T InstMinAbs2Element(const ConstVectorView<CT >& v, int*const imin);
#endif
#endif
  template T InstMinAbsElement(const ConstVectorView<CT >& v, int*const imin);

#ifndef BLAS_Norm2
  template T InstNorm2(const ConstVectorView<T >& v);
#ifdef TMV_INST_COMPLEX
  template T InstNorm2(const ConstVectorView<CT >& v);  
#endif
#endif

#undef CT

