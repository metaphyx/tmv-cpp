
#define CT complex<T>

#define DefLUD(T)\
template class HermLUDiv<T >; \
template class SymLUDiv<T >; \
template void SymLU_Decompose(const SymMatrixView<T >& A, \
    const VectorView<T >& xD, size_t* P, T& det); \

DefLUD(T);
DefLUD(CT);
#undef DefLUD

#define DefDivEq(RT1,T1,T2)\
  template void HermLU_LDivEq(const GenSymMatrix<T1 >& L,  \
      const GenVector<T1 >& xD, const size_t* P, \
      const MatrixView<T2 >& m); \
  template void HermLU_RDivEq(const GenSymMatrix<T1 >& L,  \
      const GenVector<T1 >& xD, const size_t* P, \
      const MatrixView<T2 >& m); \
  template void SymLU_LDivEq(const GenSymMatrix<T1 >& L,  \
      const GenVector<T1 >& xD, const size_t* P, \
      const MatrixView<T2 >& m); \
  template void SymLU_RDivEq(const GenSymMatrix<T1 >& L,  \
      const GenVector<T1 >& xD, const size_t* P, \
      const MatrixView<T2 >& m); \

DefDivEq(T,T,T);
DefDivEq(T,T,CT);
DefDivEq(T,CT,CT);
#undef DefDivEq

#undef CT

