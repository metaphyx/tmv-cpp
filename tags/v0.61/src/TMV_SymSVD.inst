
#define CT std::complex<T>

template class HermSVDiv<T >;
template class SymSVDiv<T >;
#ifdef INST_COMPLEX
template class HermSVDiv<CT >;
template class SymSVDiv<CT >;
#endif

#define DefDivEq(T,T2)\
template void HermSVDiv<T >::DoLDivEq(const MatrixView<T2 >& m) const; \
template void HermSVDiv<T >::DoRDivEq(const MatrixView<T2 >& m) const; \
template void HermSVDiv<T >::DoInverse(const MatrixView<T2 >& m) const; \
template void HermSVDiv<T >::DoInverse(const SymMatrixView<T2 >& m) const; \
template void SymSVDiv<T >::DoLDivEq(const MatrixView<T2 >& m) const; \
template void SymSVDiv<T >::DoRDivEq(const MatrixView<T2 >& m) const; \
template void SymSVDiv<T >::DoInverse(const MatrixView<T2 >& m) const; \
template void SymSVDiv<T >::DoInverse(const SymMatrixView<T2 >& m) const; \

DefDivEq(T,T)
#ifdef INST_COMPLEX
DefDivEq(T,CT)
DefDivEq(CT,CT)
#endif

#undef DefDivEq

#define DefDiv(T,T1,T2) \
template void HermSVDiv<T >::DoLDiv(const GenMatrix<T1 >& m1, \
    const MatrixView<T2 >& m2) const; \
template void HermSVDiv<T >::DoRDiv(const GenMatrix<T1 >& m1, \
    const MatrixView<T2 >& m2) const; \
template void SymSVDiv<T >::DoLDiv(const GenMatrix<T1 >& m1, \
    const MatrixView<T2 >& m2) const; \
template void SymSVDiv<T >::DoRDiv(const GenMatrix<T1 >& m1, \
    const MatrixView<T2 >& m2) const; \

DefDiv(T,T,T)
#ifdef INST_COMPLEX
DefDiv(T,T,CT)
DefDiv(T,CT,CT)
DefDiv(CT,T,CT)
DefDiv(CT,CT,CT)
#endif

#undef DefDiv

#undef CT
