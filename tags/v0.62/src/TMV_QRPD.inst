#define CT std::complex<T>

template class QRPDiv<T >;
#ifdef INST_COMPLEX
template class QRPDiv<CT >;
#endif

#define DefDivEq(T,T2)\
template void QRPDiv<T >::DoLDivEq(const MatrixView<T2 >& m) const; \
template void QRPDiv<T >::DoRDivEq(const MatrixView<T2 >& m) const; \
template void QRPDiv<T >::DoInverse(const MatrixView<T2 >& m) const; \

DefDivEq(T,T)
#ifdef INST_COMPLEX
DefDivEq(T,CT)
DefDivEq(CT,CT)
#endif

#undef DefDivEq

#define DefDivEq(T,T2)\
template <> template <> void QRPDiv<T >::DoLDivEq(\
    const MatrixView<T2 >& ) const \
{ TMVAssert(FALSE); } \
template <> template <> void QRPDiv<T >::DoRDivEq(\
    const MatrixView<T2 >& ) const \
{ TMVAssert(FALSE); } \
template <> template <> void QRPDiv<T >::DoInverse(\
    const MatrixView<T2 >& ) const \
{ TMVAssert(FALSE); } \

#ifdef INST_COMPLEX
DefDivEq(CT,T)
#endif

#undef DefDivEq

#define DefDiv(T,T1,T2) \
template void QRPDiv<T >::DoLDiv(const GenMatrix<T1 >& m1, \
    const MatrixView<T2 >& m2) const; \
template void QRPDiv<T >::DoRDiv(const GenMatrix<T1 >& m1, \
    const MatrixView<T2 >& m2) const; \

DefDiv(T,T,T)
#ifdef INST_COMPLEX
DefDiv(T,T,CT)
DefDiv(T,CT,CT)
DefDiv(CT,T,CT)
DefDiv(CT,CT,CT)
#endif

#undef DefDiv

#define DefDiv(T,T1,T2) \
template <> template <> void QRPDiv<T >::DoLDiv(const GenMatrix<T1 >& , \
    const MatrixView<T2 >& ) const \
{ TMVAssert(FALSE); } \
template <> template <> void QRPDiv<T >::DoRDiv(const GenMatrix<T1 >& , \
    const MatrixView<T2 >& ) const \
{ TMVAssert(FALSE); } \

#ifdef INST_COMPLEX
DefDiv(T,CT,T)
DefDiv(CT,T,T)
DefDiv(CT,CT,T)
#endif

#undef DefDiv

#undef CT
