#define CT complex<T>

#define DefQRD(T)\
template class QRDiv<T >; \
template class QRPDiv<T >; \
template void QR_Decompose(const MatrixView<T >& QR, \
    const VectorView<T >& Qbeta, T& det); \
template void QRP_Decompose(const MatrixView<T >& QR, \
    const VectorView<T >& Qbeta, size_t* P, T& det); \
template void QR_Decompose(const MatrixView<T >& Q, \
    const MatrixView<T >& R, T& detq); \
template void QRP_Decompose(const MatrixView<T >& Q, \
    const MatrixView<T >& R, size_t* P, T& detpq); \
template void GetQFromQR(const MatrixView<T >& Q, \
    const GenVector<T >& Qbeta); \
template bool QR_DownDate(const MatrixView<T >& R, \
    const GenVector<T >& z); \
template bool QR_DownDate(const MatrixView<T >& Q, \
    const MatrixView<T >& R, const GenVector<T >& z); \

DefQRD(T);
DefQRD(CT);

#undef DefQRD

#define DefDivEq(T1,T2)\
template void QR_LDivEq(const GenMatrix<T1 >& QRx,\
    const GenVector<T1 >& Qbeta, const size_t* P, \
    const MatrixView<T2 >& m, size_t N1); \
template void QR_RDivEq(const GenMatrix<T1 >& QRx,\
    const GenVector<T1 >& Qbeta, const size_t* P, \
    const MatrixView<T2 >& m, size_t N1); \
template void Q_LDivEq(const GenMatrix<T1 >& Q,\
    const GenVector<T1 >& Qbeta, const MatrixView<T2 >& m); \
template void Q_RDivEq(const GenMatrix<T1 >& Q,\
    const GenVector<T1 >& Qbeta, const MatrixView<T2 >& m); \

DefDivEq(T,T);
DefDivEq(T,CT);
DefDivEq(CT,CT);

#undef DefDivEq

#define DefDiv(T1,T2,T3)\
template void QR_LDiv(const GenMatrix<T1 >& QRx,\
    const GenVector<T1 >& Qbeta, const size_t* P, \
    const GenMatrix<T2 >& m, const MatrixView<T3 >& x, size_t N1); \
template void QR_RDiv(const GenMatrix<T1 >& QRx,\
    const GenVector<T1 >& Qbeta, const size_t* P, \
    const GenMatrix<T2 >& m, const MatrixView<T3 >& x, size_t N1); \

DefDiv(T,T,T);
//DefDiv(T,T,CT);
DefDiv(T,CT,CT);
DefDiv(CT,T,CT);
DefDiv(CT,CT,CT);

#undef DefDiv

#undef CT

