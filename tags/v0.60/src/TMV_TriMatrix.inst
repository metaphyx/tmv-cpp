
#define CT std::complex<T>

#define Def1(RT,T,Ref) \
  template bool GenUpperTriMatrix<T >::OKSubMatrix( \
      int i1, int i2, int j1, int j2, int istep, int jstep) const; \
  template bool GenUpperTriMatrix<T >::OKSubVector( \
      int i, int j, int istep, int jstep, size_t size) const; \
  template bool GenUpperTriMatrix<T >::OKSubTriMatrix( \
      int i1, int i2, int istep) const; \
  template bool ConstUpperTriMatrixView<T,FortranStyle>::OKSubMatrix( \
      int i1, int i2, int j1, int j2, int istep, int jstep) const; \
  template bool ConstUpperTriMatrixView<T,FortranStyle>::OKSubVector( \
      int i, int j, int istep, int jstep, size_t size) const; \
  template bool ConstUpperTriMatrixView<T,FortranStyle>::OKSubTriMatrix( \
      int i1, int i2, int istep) const; \
  template RT GenUpperTriMatrix<T >::NormF() const; \
  template RT GenUpperTriMatrix<T >::NormSq() const; \
  template RT GenUpperTriMatrix<T >::Norm1() const; \
  template RT GenUpperTriMatrix<T >::NormInf() const; \
  template RT GenUpperTriMatrix<T >::MaxAbsElement() const; \
  template auto_ptr<BaseMatrix<T > > GenUpperTriMatrix<T >::NewCopy() const; \
  template auto_ptr<BaseMatrix<T > > GenUpperTriMatrix<T >::NewView() const; \
  template auto_ptr<BaseMatrix<T > > GenUpperTriMatrix<T >::NewTranspose() const; \
  template auto_ptr<BaseMatrix<T > > GenUpperTriMatrix<T >::NewConjugate() const; \
  template auto_ptr<BaseMatrix<T > > GenUpperTriMatrix<T >::NewAdjoint() const; \
  template auto_ptr<BaseMatrix<T > > GenUpperTriMatrix<T >::NewInverse() const; \
  template auto_ptr<BaseMatrix<T > > GenLowerTriMatrix<T >::NewCopy() const; \
  template auto_ptr<BaseMatrix<T > > GenLowerTriMatrix<T >::NewView() const; \
  template auto_ptr<BaseMatrix<T > > GenLowerTriMatrix<T >::NewTranspose() const; \
  template auto_ptr<BaseMatrix<T > > GenLowerTriMatrix<T >::NewConjugate() const; \
  template auto_ptr<BaseMatrix<T > > GenLowerTriMatrix<T >::NewAdjoint() const; \
  template auto_ptr<BaseMatrix<T > > GenLowerTriMatrix<T >::NewInverse() const; \
  template void GenUpperTriMatrix<T >::Write(std::ostream& os) const; \
  template void GenUpperTriMatrix<T >::Write(std::ostream& os, RT t) const; \
  template void GenUpperTriMatrix<T >::WriteCompact(std::ostream& os) const; \
  template void GenUpperTriMatrix<T >::WriteCompact(std::ostream& os, \
      RT t) const; \
  template void GenLowerTriMatrix<T >::Write(std::ostream& os) const; \
  template void GenLowerTriMatrix<T >::Write(std::ostream& os, RT t) const; \
  template void GenLowerTriMatrix<T >::WriteCompact(std::ostream& os) const; \
  template void GenLowerTriMatrix<T >::WriteCompact(std::ostream& os, \
      RT t) const; \
  template T GenUpperTriMatrix<T >::cref(size_t i, size_t j) const; \
  template T GenLowerTriMatrix<T >::cref(size_t i, size_t j) const; \
  template const UpperTriMatrixView<T,CStyle>& \
      UpperTriMatrixView<T,CStyle>::SetAllTo(T x) const; \
  template const UpperTriMatrixView<T,CStyle>& \
      UpperTriMatrixView<T,CStyle>::Clip(RT t) const; \
  template const UpperTriMatrixView<T,CStyle>& \
      UpperTriMatrixView<T,CStyle>::ConjugateSelf() const; \
  template const UpperTriMatrixView<T,CStyle>& \
      UpperTriMatrixView<T,CStyle>::SetToIdentity(T x) const; \
  template void UpperTriMatrixView<T,CStyle>::Read(std::istream& is) const; \
  template void LowerTriMatrixView<T,CStyle>::Read(std::istream& is) const; \
  template Ref UpperTriMatrixView<T,CStyle>::ref(size_t i, size_t j) const; \
  template Ref LowerTriMatrixView<T,CStyle>::ref(size_t i, size_t j) const; \
  template std::istream& operator>>(std::istream& fin, \
      const UpperTriMatrixView<T >& m); \
  template std::istream& operator>>(std::istream& fin, \
      const LowerTriMatrixView<T >& m); \
  template void Swap(const UpperTriMatrixView<T >& m1, \
      const UpperTriMatrixView<T >& m2); \
  template void UpperTriMatrixReadError<T >::Write( \
      std::ostream& os) const throw(); \
  template void LowerTriMatrixReadError<T >::Write( \
      std::ostream& os) const throw(); \

Def1(T,T,T&)
#ifdef INST_COMPLEX
Def1(T,CT,VarConjRef<CT >)
#endif

#undef Def1

#define Def2(T1,T2) \
  template bool operator==(const GenUpperTriMatrix<T1 >& m1, \
      const GenUpperTriMatrix<T2 >& m2); \

Def2(T,T)
#ifdef INST_COMPLEX
Def2(T,CT)
Def2(CT,T)
Def2(CT,CT)
#endif

#undef Def2

#define Def3(T,D,S) \
  template std::istream& operator>>(std::istream& is, \
      auto_ptr<UpperTriMatrix<T,D,S> >& m); \
  template std::istream& operator>>(std::istream& is, \
      auto_ptr<LowerTriMatrix<T,D,S> >& m); \
  template std::istream& operator>>(std::istream& is, \
      auto_ptr<UpperTriMatrix<T,D,S,FortranStyle> >& m); \
  template std::istream& operator>>(std::istream& is,  \
      auto_ptr<LowerTriMatrix<T,D,S,FortranStyle> >& m); \

Def3(T,UnitDiag,RowMajor)
Def3(T,UnitDiag,ColMajor)
Def3(T,NonUnitDiag,RowMajor)
Def3(T,NonUnitDiag,ColMajor)
#ifdef INST_COMPLEX
Def3(CT,UnitDiag,RowMajor)
Def3(CT,UnitDiag,ColMajor)
Def3(CT,NonUnitDiag,RowMajor)
Def3(CT,NonUnitDiag,ColMajor)
#endif

#undef Def3

#undef CT

