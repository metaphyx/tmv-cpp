#summary Instructions for installing TMV using SCons

= Installing using SCons =

With the version 0.62 release of TMV, I introduced a new installation method using SCons.  
For that 
release it was considered an alternative method, since it was brand new.  However, by now, I
have tried it on quite a few platforms and it seems to be working very well.  It usually finds
the BLAS and LAPACK libraries on your system automatically, which is nicer than having 
to specify them by hand.

If you have trouble installing with SCons, you can try the 
\texttt{Makefile} installation instead (\S\ref{Install_Make}).  And please let me know about 
the problem you are having either at \mygroup\ or \myissues.

\begin{enumerate}
\item Download and unpack the tarball as described above (\S\ref{Install_Obtain}).

\item Make sure you have SCons installed on your system.  
It is available for free from \url{http://www.scons.org/}.  (It is a
very quick installation if you have Python installed.)

\item Type \\
\texttt{scons}

This will make the libraries \texttt{libtmv.a} and \texttt{libtmv\_symband.a}
and put them into the directory \texttt{lib}.  Like with \texttt{make}, you can add
the flag \texttt{-j4} to use 4 (or whatever number of) compilers simultaneously.
Also, the command \texttt{scons -h} will print some help information, and \texttt{scons --help}
will print information about the options specific to TMV.

There are a number of command-line options that you might need (but try it with no flags
first -- it can often find everything automatically).  
The options are listed 
with their default value.  You change them simply by specifying a different value
on the command line.  For example:\\
\texttt{scons CXX=icpc INST\_LONGDOUBLE=true}\\
If you need to run SCons multiple times (for example to compile the test suite or install
the libraries as described below), you only need to specify the new parameter values the first
time you run the SCons.
The program automatically saves your options and continues to use them until you
change a value again.
\begin{itemize}
\item \texttt{CXX=g++} specifies which C++ compiler to use.
\item \texttt{FLAGS=''} specifies the basic flags to pass to the compiler.  The default behavior is to
automatically choose good flags to use according to which kind of compiler you are using.
It has defaults for \texttt{g++}, \texttt{icpc} and \texttt{pgCC}.  If you are using a different compiler or don't
like the default, then you can specify this by hand.  
Remember to put the flags in quotes,
so the whitespace doesn't confuse the parser.  e.g. \texttt{scons FLAGS='-O3 -g'}
\item \texttt{DEBUG=false} specifies whether to keep the debugging assert statements in the compiled library code.  
\item \texttt{PREFIX=/usr/local} specifies where to install the library when running \texttt{scons install} (see below).
\item \texttt{INST\_FLOAT=true} specifies whether to instantiate the \tt{<float>} templates.
\item \texttt{INST\_DOUBLE=true} specifies whether to instantiate the \tt{<double>} templates.
\item \texttt{INST\_LONGDOUBLE=false} specifies whether to instantiate the \tt{<long double>} templates.
\item \texttt{INST\_INT=false} specifies whether to instantiate the \tt{<int>} templates.
\index{Installation!OpenMP}
\index{OpenMP}
\item \texttt{WITH\_OPENMP=true} specifies whether to use OpenMP to parallelize some parts of the code.
\end{itemize}
The next flags set up the paths that SCons will use to try to find your BLAS and LAPACK libraries.
\begin{itemize}
\item \texttt{IMPORT\_ENV=false} specifies whether to import the entire environment from the calling shell.
The default
is to start with a clean environment to be less susceptible to a particular user having an unusual set up.  But sometimes sysadmins set things up in non-standard ways and use
the environment variables to make everything work.  If this is the case, then 
\texttt{IMPORT\_ENV} should do the trick.  It imports the environment, but doe not add any
\texttt{-I} or \texttt{-L} flags when compiling.
\item \texttt{EXTRA\_PATH=''} specifies directories in which to search for executables (notably the compiler, although you can also just give the full path in the \texttt{CXX} parameter)
in addition to the standard locations such as \texttt{/usr/bin} and \texttt{/usr/local/bin}.
If you are giving multiple directories, they should be separated by colons.
\item \texttt{EXTRA\_INCLUDE\_PATH=''} specifies directories in which to search for header files
(such as the BLAS or LAPACK header files)
in addition to the standard locations such as \texttt{/usr/include} and \texttt{/usr/local/include}.
These directories are specified as \texttt{-I} flags to the compiler.
If you are giving multiple directories, they should be separated by colons.
\item \texttt{EXTRA\_LIB\_PATH=''} specifies directories in which to search for libraries
(such as the BLAS or LAPACK libraries)
in addition to the standard locations such as \texttt{/usr/lib} and \texttt{/usr/local/lib}.  
These directories are specified as \texttt{-L} flags to the linker.
If you are giving multiple directories, they should be separated by colons.
\item \texttt{IMPORT\_PATHS=false} specifies whether to import extra path directories from the environment variables: 
\texttt{PATH}, \texttt{C\_INCLUDE\_PATH}, \texttt{LD\_LIBRARY\_PATH} and \texttt{LIBRARY\_PATH}.
\end{itemize}
The next options can be used to specify what BLAS and/or LAPACK libraries to use (if any),
overriding the default of using whatever libraries SCons chooses from searching through your path
and trying to link the libraries that it finds.  The \texttt{FORCE} options can be useful if SCons finds
a library before trying the one that you want, or if SCons fails in the linking step even though
the library should link successfully (I'm still not sure why this happens sometimes), or if
you want to compile for a library that requires different linking instructions than the 
ones that SCons tries\footnote{
If you have a case of needing different linking instructions, and your BLAS or LAPACK is a standard
installation on your machine (not some goofy personal installation that no one else will duplicate),
then let me know and I'll add it to the SConstruct file for the next release.}.
The \texttt{FORCE} options will try to test linking with the library requested,
but if it fails, then it will just give a warning message.
\index{LAPACK!SCons options}
\index{BLAS!SCons options}
\begin{itemize}
\item \texttt{WITH\_BLAS=true} specifies whether to look for and try to use a BLAS library.
\item \texttt{WITH\_LAPACK=false} specifies whether to look for and try to use a LAPACK library.
Note: the default here used to be \tt{true}.  But my experience has been that the TMV code
is more stable than typical LAPACK distributions, especially with regard to overflow and 
underflow.  And it is generally equally fast, and sometimes faster.  The only exception is 
finding Eigenvectors for extremely large hermitian matrices\footnote{
LAPACK implements an algorithm called Relatively Robust Representation (RRR) to 
find the eigenvectors, rather than the divide and conquer algorithm used by TMV.
RRR is faster, but only when the matrix size is sufficiently large.  Including this algorithm 
in TMV is \#\ref{Bugs_RRR} on my To-do list (\S\ref{Bugs}).
}.  And even then, TMV may still be faster 
if you use a machine with multiple 
cores, since TMV seems to have better parallelization of this algorithm
 (if \tt{WITH_OPENMP=true}) than many LAPACK libraries.
\item \texttt{FORCE\_MKL=false} forces the use of the Intel Math Kernel library. 
It requires the header file \texttt{"mkl.h"} to be found in your path. 
\index{BLAS!MKL}
\index{LAPACK!MKL}
\item \texttt{FORCE\_ACML=false} forces the use of the AMD Core Math library.  
It requires the header file \texttt{"acml.h"} to be found in your path.
\index{BLAS!ACML}
\index{LAPACK!ACML}
\item \texttt{FORCE\_GOTO=false} forces the use of the GotoBlas library.  
\index{BLAS!GotoBLAS}
\item \texttt{FORCE\_ATLAS=false} forces the use of the ATLAS library (for BLAS).  
It requires the header file \texttt{"cblas.h"} to be found in your path.
\index{BLAS!ATLAS}
\item \texttt{FORCE\_CBLAS=false} forces the use of a CBLAS library.
\index{BLAS!CBLAS}
\item \texttt{FORCE\_FBLAS=false} forces the use of a Fortran BLAS library.
\index{BLAS!Fortran BLAS}
\item \texttt{FORCE\_CLAPACK=false} forces the use of the CLAPACk library. 
It requires the CLAPACK version of the header file \texttt{"clapack.h"} to be found in your path.
\index{LAPACK!CLAPACK}
\item \texttt{FORCE\_ATLAS\_LAPACK=false} forces the use of the LAPACK portion
of the ATLAS Library.  
It requires the ATLAS version of the header file \texttt{"clapack.h"} to be found in your path.
\index{LAPACK!ATLAS}
\index{BLAS!ATLAS}
\item \texttt{FORCE\_FLAPACK=false} forces the use of a Fortran LAPACK library.
\index{LAPACK!Fortran LAPACK}
\item \texttt{LIBS=''} directly specifies the library flags to use for linking if the automatic methods aren't working for you.  Because of the way SCons works,
these should omit the \texttt{-l} part of the flag, since SCons will add this to what is provided.
For example, to specify an alternate name for the CLAPACK library, use 
\texttt{scons LIBS=lapack\_LINUX}.  Multiple libraries here should be separated by 
whitespace and enclosed in quotes.
\end{itemize}
Finally, some miscellaneous options that you are less likely to need:
\begin{itemize}
\item \texttt{STATIC=false} specifies whether to use static linkage.  Some systems have trouble with
dynamic linkage of libraries.  This usually indicates that something is installed incorrectly, but
it can be easier to just use static linkage when you compile as a workaround.  This flag does this
for the test suite executables.
\item \texttt{WITH\_SSE=true} specifies whether to use the \texttt{-msse2} flag with \texttt{icpc} compilations. 
It seems like most machines that have \texttt{icpc} are able to use SSE commands.  However, 
I couldn't figure out a compiler flag that would turn on SSE {\em if and only if} the machine
supports it.  So the default is to use the flag \texttt{-msse2}, but you can disable it by setting 
\texttt{WITH\_SSE=false} if your machine doesn't have SSE support.
\item \texttt{XTEST=0} specifies whether to include extra tests in the test suite.  \texttt{XTEST}
is treated as a bit set, with each non-zero bit turning on particular tests.  Type ``\tt{scons -h}'' for 
more information.

\item \texttt{MEM\_TEST=false} specifies whether to include extra memory tests in the library and test suite.
\item \texttt{USE\_STEGR=true} specifies whether to use the LAPACK algorithm called
\tt{dstegr} (or \tt{sstegr} for \tt{<float>}) for symmetric
eigenvector calculation.  If it is false, the divide-and-conquer algorithm,
named \tt{dstedc} (or \tt{sstedc}) will be used instead.
\index{Singular Value Decomposition!LAPACK ?stegr}
\index{Eigenvalues!LAPACK ?stegr}
\index{Warnings!LAPACK ?stegr}
\index{LAPACK!dstegr/sstegr issues}
\item
\texttt{USE\_GEQP3=true} specifies whether to use the LAPACK algorithm called
\tt{dgeqp3} (or its variants) for the strict QRP decomposition.  If it is false,
the native TMV code will be used instead.
\index{QRP Decomposition!LAPACK ?geqp3}
\index{LAPACK!Problems with QRP decomposition}
\item \texttt{SMALL\_TESTS=false} specifies whether to make the smaller test suite programs: \texttt{tmvtest1a}, \texttt{tmvtest1b}, etc. 
\item \texttt{WARN=false} specifies whether to have the compiler report warning (with -Wall or
something similar).
\item \texttt{NOMIX\_SMALL=false} specifies whether to avoid mixing Small and regular arithmetic.  
(This is automatically selected if GotoBLAS is being used.)
\item \texttt{CACHE\_LIB=true} specifies whether to cache the results of the library checks.  
Scons is pretty good at only recompiling what needs to be recompiled based on what options or files you have changed.  However, it is not good at detecting when changed options might change the results of a BLAS or LAPACK library check.  So if you add new paths for it to search, or even more so, if you change the names or locations of libraries on your system, then you should set \tt{CACHE\_LIB=false} to force scons to redo the BLAS and LAPACK checks each time.
\item \texttt{WITH\_UPS=false} specifies whether to install TMV information for ups into the \tt{PREFIX/ups} directory.
\item \texttt{TEST\_DEPRECATED=false} specifies whether to use the old deprecated method
names in the test suite.
\end{itemize}

When SCons starts up, it will look through the standard paths, along with any extra paths you have
specified with the above options, to find BLAS
and LAPACK libraries.  This can sometimes require a few iterations to get working correctly.  
You should look at the initial output from SCons to make sure it finds the correct BLAS
and LAPACK libraries that you think it should find.  Here is a sample output:\footnote{
This is the exact output that I get with the default options on my MacBook.}
\begin{verbatim}
$ scons
scons: Reading SConscript files ...

Using compiler: g++-4
compiler version: 4.3.2
Debugging turned off
Checking for MKL... no
Checking for ACML... no
Checking for GotoBLAS... no
Checking for CBLAS... yes
Using CBLAS
Checking for CLAPACK... no
Checking for Fortran LAPACK... yes
Using Fortran LAPACK
scons: done reading SConscript files.
scons: Building targets ...
\end{verbatim}
\vspace{-8pt}(\emph{Starts the actual compiling})

If a ``\texttt{Checking for}...'' line ends with \texttt{no}, even though you think that library is installed
on your computer, then it probably means that you need to tell SCons which directories
to search, in addition to the standard locations.  The most straightforward way to do this is
with the parameters \texttt{EXTRA\_INCLUDE\_PATH} and \texttt{EXTRA\_LIB\_PATH}.  
These are described in detail above.  See also \texttt{IMPORT\_ENV} and \texttt{IMPORT\_PATHS}.

\item (Optional) Type\\
\texttt{scons test}
\index{Installation!Test suite}

This will make three executables called \texttt{tmvtest1}, 
\texttt{tmvtest2} and \texttt{tmvtest3} in the \texttt{test} directory.

Then you should run the three test suites.
They should output a bunch of lines reading \texttt{[{\em Something}] passed all tests}.
If one of them ends in a line that starts with \texttt{Error}, 
then please post a bug report at \myissues\ about the problem including what compiler
you are using, some details about your system, and what (if any) BLAS and LAPACK
libraries you are linking to.

If you specify \texttt{SMALL\_TESTS=true}, then the smaller test executables
\texttt{tmvtest1a-d}, \texttt{tmvtest2a-c}, and \texttt{tmvtest3a-e} (where \tt{a-d} means 
four files with each of \tt{a}, \tt{b}, \tt{c} and \tt{d})
will be made instead.
These perform the same tests as the larger test executables, but can be easier
for some linkers.

\item Type\\
\texttt{scons install}\\
(or possibly \tt{sudo scons install} if you are installing into \tt{/usr/local} or somewhere similar).

This will install the necessary header files into the directory \texttt{/usr/local/include} and the libraries
into \texttt{/usr/local/lib}.  As mentioned above, you can also specify a different prefix 
with the command line option \texttt{PREFIX=}\emph{install-dir}.  A common choice for users
without \texttt{sudo} privileges is \texttt{PREFIX=$\sim$} which will install the library in \texttt{$\sim$/include}
and \texttt{$\sim$/lib}.

At the end of the installation process, you should see a message similar to:
\begin{verbatim}
The TMV library was successfully installed.  
To link your code against the TMV library, you should use the 
link flags: 

-ltmv -llapack -lblas -lpthread -fopenmp

Or if you are using Band, Sym or SymBand matrices, use: 

-ltmv_symband -ltmv -llapack -lblas -lpthread -fopenmp

These flags (except for the optional -ltmv_symband) have been
saved in the file:

/usr/local/share/tmv-link

so you can automatically use the correct flags in a makefile
(for example) by using lines such as:

TMVLINK := $(shell cat /usr/local/share/tmv-link)
LIBS = $(TMVLINK) [... other libs ...]


scons: done building targets.
\end{verbatim}
(Again, this is the actual output on my laptop when I type \tt{sudo scons install}.)
These instructions tell you what BLAS and LAPACK libraries were found on your system and 
are needed for proper linkage of your code.  The linkage flags are stored in a file on your
computer so that you can automatically get the linkage correct according to what options
you decide to use when installing TMV.  This is especially useful on systems where a
system administrator installs the library, which is then used by many users.  

You can have your makefiles read this file as described above.  Or if you are using SCons
to build your software, you can similarly add the contents of the file into \tt{env['LIBS']}.
The \tt{examples} directory has a makefile that uses the above lines
(using the local \tt{share} directory rather than the installed location).

\end{enumerate}