#summary Instructions for installing TMV using make


= Installing using make =

This is a more standard installation method if you don't want to bother with SCons, or if you are just
more familiar with the make program and don't want to deal with SCons.  It requires a bit more
user input in terms of directly specifying the BLAS and/or LAPACK libraries, but because of that
it is also a bit easier to exactly customize the installation if you want to do something non-standard.

\begin{enumerate}
\item Download and unpack the tarball as described above (\S\ref{Install_Obtain}).

\item
Edit the makefile.
\index{LAPACK!Setup makefile}
\index{BLAS!Setup makefile}
\index{Installation!Setup makefile}

The start of the makefile lists 5 things to specify: the compiler,
the include directories, the other flags to send to the compiler, 
any necessary BLAS/LAPACK linkage flags, and the installation directory.
The default setup is:
\begin{verbatim}
CC= g++
INCLUDE= -Iinclude
CFLAGS= $(INCLUDE) -O2 -DNOBLAS -DNDEBUG
BLASLIBS=
PREFIX=/usr/local
\end{verbatim}
but you will probably want to change this\footnote{
The original version of the \texttt{Makefile}
is copied in the file \texttt{Makefile.original} in case your copy gets messed up, and you want to 
go back to the original.}.

This default setup will compile using g++ without any BLAS or LAPACK library and 
with debugging turned off. 
This setup should work on any system with gcc, although it almost certainly 
won't be as fast as using an optimized BLAS library and/or a LAPACK library.

You should edit these so that:
\begin{itemize}
\item \texttt{CC} specifies the C++ compiler to use.
\item \texttt{INCLUDE} specifies the directories for any BLAS and LAPACK header
files you want to include. (You should leave \tt{-Iinclude} there as well.)
\item \texttt{CFLAGS} contains any compiler flags you want.
(See below for TMV-specific flags to consider.)
\item \texttt{BLASLIBS} specifies the libraries required for linking your BLAS and LAPACK libraries.
\item \texttt{PREFIX} specifies the directory for \texttt{make install} to copy the files to.
\end{itemize}

After these lines, there are several commented-out examples for different systems 
using various BLAS
and LAPACK versions, showcasing some of the compiler options described below,
and giving examples of what you need for several common (or at least representative) systems.
If you have a system similar to one of these, then it should be a good 
starting point for you to figure out what you want to use.

See the next section below for a complete list of compiler flags that control how the TMV library is built.

\item
(Advanced usage) Edit the Inst and Blas files.

By default, the library will include instantiations of all classes and 
functions
that use either \texttt{double} or \texttt{float} (including complex versions of each).  
There are a few flags, such as 
\texttt{-DNO\_INST\_FLOAT} and \texttt{-DINST\_LONGDOUBLE},
that change this as described below.  
But if you want to compile routines for some other class, such as a user-defined
\texttt{MyQuadPrecisionType} class, then you will need to modify the file 
\texttt{src/TMV\_Inst.h}.
You simply need to add the lines:
\begin{tmvcode}
#define T MyQuadPrecisionType
#include InstFile
#undef T
\end{tmvcode}
\index{User-defined types}
to the end of the file before compiling.  (Obviously, you should
replace \tt{MyQuadPrecisionType} with whatever
type you want to be instantiated in the library.)

Also, the file \texttt{src/TMV\_Blas.h}
sets up all the BLAS and LAPACK calling structures,
as well as the necessary \texttt{\#include} statements.  
So if the BLAS or LAPACK options aren't working 
for your system, you may need to edit these files as well.
This is especially true if your BLAS or LAPACK versions are not one of 
ATLAS, CLAPACK, FLAPACK, MKL, or ACML.  The comments at the beginning of 
\texttt{TMV\_Blas.h} gives instructions on how to set up the file for 
other installations.
\index{LAPACK!Setup TMV\_Blas.h file}
\index{BLAS!Setup TMV\_Blas.h file}

\item
Type: \\
\texttt{make libs}

This will make the TMV libraries, \texttt{libtmv.a} and \texttt{libtmv\_symband.a},
which will be located in the directory \texttt{lib}.

\item
(Optional) Next type:\\
\texttt{make test}
\index{Installation!Test suite}

This will make three executables called \texttt{tmvtest1}, 
\texttt{tmvtest2} and \texttt{tmvtest3} in the \texttt{bin} directory.

Then you should run the three test suites.
They should output a bunch of lines reading \texttt{[{\em Something}] passed all tests}.
If one of them ends in a line that starts with \texttt{Error}, 
then please post a bug report at \myissues\ about the problem including what compiler
you are using, some details about your system, and what (if any) BLAS and LAPACK
libraries you are linking to.

\item
Next type:\\
\texttt{make install}\\
(or possibly \tt{sudo make install} if you are installing into \tt{/usr/local} or somewhere similar).

This will copy the header files and the libraries to \texttt{PREFIX/include} and 
\texttt{PREFIX/lib}.  The default \texttt{PREFIX} is \texttt{/usr/local}, but you can change
this in the \texttt{Makefile} to some other installation directory if you want.

\item
(Optional) You may also want to make the example programs by typing:\\
\texttt{make examples}

This will make five executables called \texttt{vector}, \texttt{matrix}, \texttt{division},
\texttt{bandmatrix}, and \texttt{symmatrix}.
These programs, along with their corresponding source code in the \texttt{examples}
directory, give concrete examples of some of the common things you might want
to do with the TMV library.  They don't really try to be comprehensive,
but they do give a pretty good overview of the main features,
so looking at them may be a useful way to get started programming with TMV.

Also, they are a lot quicker to compile than the test suite, so they can provide a 
quick way to make sure that you have specified the correct linking flags for any
BLAS or LAPACK libraries that you might need (according to the \tt{-D} flags
you specified for building the TMV library.

\item
Compile you program

Each \texttt{.cpp} file that uses TMV will need to have \\
\tt{\#include "TMV.h"}\\
at the top.
\index{TMV.h}
If you are using any of the special matrix types (other than diagonal and triangular),
then you also need to include their particular header files as well. (e.g.
\tt{TMV\_Band.h}, \tt{TMV\_Small.h}, etc.)
\index{TMV\_Band.h}
\index{TMV\_Small.h}
\index{TMV\_Sym.h}
\index{TMV\_SymBand.h}

If you did not install the header files (with \texttt{make install} above) to 
a directory that is in the standard path for header files, then 
you will need to use the compile flag
\texttt{-I[tmvdir]/include} when making the object file to tell the 
compiler where the TMV header files are.

For the linking step, you need to compile with the flag
\texttt{-ltmv}.
If you are using band, symmetric or symmetric band matrices
in your code, then you will 
need to link with the flags \texttt{-ltmv\_symband -ltmv}.
And if you did not install the libraries to a directory in your linking path,
then you need to include the flag
\texttt{-L[tmvdir]/lib} to tell the linker where the libraries are.

If you are using BLAS and/or LAPACK calls from the TMV code,
then you will also need to 
link with their libraries.  
For example, for my version of Intel's Math Kernel LIbrary, I use 
\texttt{-lmkl\_lapack -lmkl\_ia32 -lguide -lpthread}.  
For ATLAS,
I use \texttt{-llapack -lcblas -latlas}.  For your specific installation, you may need 
the same thing, or something slightly different, including possibly
\texttt{-L} flags to indicate where the BLAS or LAPACK libraries are located.
\index{LAPACK!Linking}
\index{BLAS!Linking}

\end{enumerate}

\subsection{Compiler flags}
\label{Install_Flags}
\index{Installation!Compiler flags}

Here are some compiler define flags to consider using:
\begin{itemize}
\item
\texttt{-DNDEBUG} will turn off debugging.  My recommendation is to leave debugging
on in your own code that is calling TMV routines, since it doesn't slow things down too 
much.  Then when you decide to export a version of the code that needs to be as fast 
as possible, recompile with this flag.
On the other hand, the internal TMV code should be pretty well debugged
when you get it, so for compiling the library, you should go ahead and use this flag.
\end{itemize}
The rest of the flags are only relevant when compiling the TMV library, so you won't 
need any of them when compiling your own code that uses TMV routines.  And if you 
install with SCons, it will determine which flags to set according to the somewhat simpler 
list of SCons options.
\begin{itemize}
\item
\texttt{-DNO\_INST\_FLOAT} will not instantiate any \tt{<float>} classes or routines.
\item
\texttt{-DNO\_INST\_DOUBLE} will not instantiate any \tt{<double>} classes or routines.
\item
\texttt{-DNO\_INST\_COMPLEX} will not instantiate any complex classes or routines.
\item
\texttt{-DINST\_LONGDOUBLE} will instantiate \tt{<long double>} classes and routines.
\item
\texttt{-DINST\_INT} will instantiate \tt{<int>} classes and routines.
\end{itemize}
The next flags specify what BLAS and/or LAPACK libraries to use (if any):
\index{LAPACK!Compiler flags}
\index{BLAS!Compiler flags}
\begin{itemize}
\item
\texttt{-DNOBLAS} will not call any external BLAS or LAPACK routines
\item
\texttt{-DNOLAP} will not call any external LAPACK routines
\item
\texttt{-DATLAS} will set up the BLAS calls as defined by ATLAS.  And (if -DNOLAP
is not specified), it will also call the several LAPACK routines
provided by ATLAS.
\index{BLAS!ATLAS}
\item
\texttt{-DCBLAS} will set up the BLAS calls using the notation provided by the 
CBLAS interface to BLAS.  Many systems have a library like this installed as 
\index{BLAS!CBLAS}
\texttt{/usr/local/lib/libcblas.a}, or some similar location,
so it is worth looking to see if you have this before
trying to install something new.
\item
\texttt{-DFBLAS} will set up the BLAS calls using a library that was designed to be called
from Fortran programs rather than C.  
Most BLAS installations also install the C interface, but if your
BLAS does not have this (e.g. GotoBLAS), then this flag should work.  
Since there is often no
header file for a Fortran BLAS library, we include the file \texttt{fblas.h} in the TMV 
\index{BLAS!Fortran BLAS}
\texttt{include} directory that should work.
\item
\texttt{-DCLAPACK} will set up the LAPACK calls for the CLAPACK distribution.  I 
find this version easier to get installed than the Fortran LAPACK distribution,
so I would recommend using this if you don't already have a version of LAPCK
installed somewhere on you system.  
Defining both ATLAS and CLAPACK will use
the CLAPACK version for all LAPACK routines, including the ones also provided by 
ATLAS.  That is, ATLAS will only be used for its BLAS routines.  If you want
the ATLAS versions of its few LAPACK routines instead, the ATLAS 
installation instructions describe a way to get them into the CLAPACK library.
Also, you should make sure the \texttt{-I} directories lists the directory with the CLAPACK
version of clapack.h before the ATLAS version.
\index{LAPACK!CLAPACK}
\index{BLAS!ATLAS}
\item
\texttt{-DFLAPACK} will set up the LAPACK calls for a distribution that
was designed to be called from Fortran programs rather than C.  Since such distributions
do not provide a header file, we provide \texttt{flapack.h} in the TMV \texttt{include} directory.
\index{LAPACK!Fortran LAPACK}
\item
\texttt{-DMKL} will call all the external BLAS and LAPACK routines as defined by the
Intel Math Kernel Library.  You should specify the directory with \texttt{mkl.h} with a 
\index{BLAS!MKL}
\index{LAPACK!MKL}
\texttt{-I} flag if it is not installed in your include path.
\item
\texttt{-DACML} will call all the external BLAS and LAPACK routines as defined by the 
AMD Core Math Library.  You should specify the directory with \texttt{acml.h} with a 
\index{BLAS!ACML}
\index{LAPACK!ACML}
\texttt{-I} flag if it is not installed in your include path.
\end{itemize}
The next set of compiler defines are not usually necessary.  But
if you have problems, these might be useful:
\begin{itemize}
\item
\texttt{-DXTEST=[num]} will do extra testing in the test suite, as well as add a few $O(N)$
time assert statements.  (Most of the assert statements that are normally run only take
$O(1)$ time.)  I always do tests with \tt{XTEST=127} to turn on all of the extra tests
before releasing a version, but the
executable gets quite large, as do many of the \texttt{TMV\_Test*.o} files.  Plus it takes
a lot longer to compile.  So the default is to not use it.  

\item
\texttt{-DMEMTEST} will do extra testing of the memory usage to look for memory leaks
and other memory errors.  Again, there is probably no need for you to use this
flag.  But if you think there is a memory leak in TMV, this could help you find it, 
in which case please let me know.

\item
\texttt{-DNOSTEGR} specifies that the LAPACK algorithm called
\tt{dstegr} (or \tt{sstegr} for \tt{<float>}) should not be used for symmetric
eigenvector calculation.  In this case, the divide-and-conquer algorithm,
named \tt{dstedc} (or \tt{sstedc}) will be used instead.
\index{Singular Value Decomposition!LAPACK ?stegr}
\index{Eigenvalues!LAPACK ?stegr}
\index{Warnings!LAPACK ?stegr}
\index{LAPACK!dstegr/sstegr issues}

I used to have problems with the \tt{stegr} algorithm producing incorrent
results, but I figured out how to detect the problem and now
the TMV code starts by calling \tt{stegr}, and then if it fails it calls
the slower, but more robust, \tt{stedc} routine.
If you want to avoid this behavior and always use the \tt{stedc} algorithm,
you can compile with this flag.
\item
\texttt{-DNOGEQP3} specifies that the LAPACK algorithm called
\tt{dgeqp3} (or its variants) should not be used for the strict QRP decomposition.
In this case, the native TMV code will be used instead.
\index{QRP Decomposition!LAPACK ?geqp3}
\index{LAPACK!Problems with QRP decomposition}

I have found that the LAPACK code for \tt{?geqp3} does not always
produce an $R$ matrix
with strictly decreasing elements along the diagonal.  So if this is important
for you, then you should use this flag.
\item
\index{LAPACK!Workspace issues}
\texttt{-DNOWORKQUERY} specifies that your LAPACK library does not support
work size queries.  There are a few LAPACK routines that require workspace whose
optimal size depends on details of the L1 cache size of your machine.  Normally,
you can pass the routine a work size of -1 to indicate that you are doing a workspace
query, in which case the routine returns the optimal value to use.  This is the normal
mode of operation for TMV.  

However, some older LAPACK distributions do not support
this process.  The example I found was the MKL with icc version 9.0.
So if you get errors similar to \\
\texttt{TMV Error: info < 0 returned by LAPACK function dormqr}\\
then this flag will compile without the workspace queries, instead just
using a good guess for the optimal size.
\index{BLAS!MKL}

\item
\texttt{-DNOMIX\_SMALL} will avoid all arithmetic that mixes \tt{SmallMatrix} and \tt{SmallVector} 
with regular \tt{Matrix} or \tt{Vector} in the test program \texttt{tmvtest3}.
Some BLAS libraries -- specifically GotoBLAS, possibly others -- 
don't work with this kind of mixing, so this flag allows you to test
the rest of the \tt{Small} arithmetic if the mixing is causing problems for your
system.  

\item
\texttt{-DNOSTL} uses some workarounds for segments of code that use the STL
library, but which didn't work for one of my compilers.  I'm pretty sure it is
because the compiler wasn't installed correctly, so I don't think you
should really ever need to use this flag.  
But in any case, it 
will use a median-of-three quicksort algorithm for sorting
rather than the standard library's sort.  And it manually reads strings 
using character reads, rather than using the \tt{>>} operator.  

\item
\texttt{-DXDEBUG} will do different extra (much slower) debugging.  This one checks for
incorrect results from the various algorithms by doing things the simple slow way
and comparing the results to the fast blocked or recursive or in-place version
to make sure the answer isn't (significantly) different.  
I use this one a lot when debugging
new algorithms, usually on a file-by-file basis.  Again, you shouldn't need this for
an official release version.  But if you do get wrong answers for something, you could
use this to try to find the problem.

\item
\texttt{-DTMV\_BLOCKSIZE=NN} will change the block size used by some routines.  
The current value is 64, which is good for many computers.  
The optimal value will depend on the size of your
CPU's L1 cache.  So if you want to try to tune the algorithms, you can 
modify this value to something more appropriate for your computer.
However, you are probably better off just using an optimized BLAS and LAPACK
library and let TMV call that instead.
\end{itemize}
