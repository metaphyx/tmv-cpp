///////////////////////////////////////////////////////////////////////////////
// vim:et:ts=2:sw=2:ci:cino=f0,g0,t0,+0:
//                                                                           //
// The Template Matrix/Vector Library for C++ was created by Mike Jarvis     //
// Copyright (C) 1998 - 2009                                                 //
//                                                                           //
// The project is hosted at http://sourceforge.net/projects/tmv-cpp/         //
// where you can find the current version and current documention.           //
//                                                                           //
// For concerns or problems with the software, Mike may be contacted at      //
// mike_jarvis@users.sourceforge.net                                         //
//                                                                           //
// This program is free software; you can redistribute it and/or             //
// modify it under the terms of the GNU General Public License               //
// as published by the Free Software Foundation; either version 2            //
// of the License, or (at your option) any later version.                    //
//                                                                           //
// This program is distributed in the hope that it will be useful,           //
// but WITHOUT ANY WARRANTY; without even the implied warranty of            //
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the             //
// GNU General Public License for more details.                              //
//                                                                           //
// You should have received a copy of the GNU General Public License         //
// along with this program in the file LICENSE.                              //
//                                                                           //
// If not, write to:                                                         //
// The Free Software Foundation, Inc.                                        //
// 51 Franklin Street, Fifth Floor,                                          //
// Boston, MA  02110-1301, USA.                                              //
//                                                                           //
///////////////////////////////////////////////////////////////////////////////


// This file has the kernel routines for doing a single block matrix product.
// These are called from algo 23 and 24 in the TMV_MultMM.h file.
//
// Algo 23 calls 16x16x16 and if SSE then 16x16x32 (for double and float)
// and 16x16x64 (for float).
// Algo 24 calls 16x16xK, Mx16x16, 16xNx16, and MxNxK.  The first (16x16xK)
// may have known or unknown K.
//
// When doing a TMV_INLINE compilation, (or for the types that aren't
// instantiated in the compiled library) we let these be static functions.
// Otherwise, we just declare the functions without defining them.
// When we are actually compiling the library, however, we need to
// show the definition.
// We control this behavior with the definition of TMV_CompilingLibrary.

#ifndef TMV_MultMM_Kernel_H
#define TMV_MultMM_Kernel_H

#include "TMV_Scaling.h"

#if defined(__SSE2__) || defined(__SSE__)
#include "xmmintrin.h"
#endif

namespace tmv {

  // First the gene
  template <int ix, class T>
  static void generic_multmm_16_16_16(
      const Scaling<ix,T>& x, const T* A0, const T* B0, T* C0)
  {
    const bool add = true;
    T a0, a1;
    T b0, b1;

    T C00, C01, C10, C11;
    T c00, c01, c10, c11;

    int i2,j2;

    j2 = 8; do 
    {
      b0 = B0[0]; 
      b1 = B0[16]; 
      i2 = 4; do 
      {
        // 1
        C00 = Maybe<add && (ix==1)>::select(C0[0] , T(0));
        a0 = A0[0];  c00 = a0 * b0; C00 += c00;
        C10 = Maybe<add && (ix==1)>::select(C0[1] , T(0));
        a1 = A0[16]; c10 = a1 * b0; C10 += c10;
        C01 = Maybe<add && (ix==1)>::select(C0[16] , T(0));
        c01 = a0 * b1; C01 += c01;
        C11 = Maybe<add && (ix==1)>::select(C0[17] , T(0));
        b0 = B0[1];  c11 = a1 * b1; C11 += c11;

        // 2
        a0 = A0[1];  c00 = a0 * b0; C00 += c00;
        a1 = A0[17]; c10 = a1 * b0; C10 += c10;
        b1 = B0[17]; c01 = a0 * b1; C01 += c01;
        b0 = B0[2];  c11 = a1 * b1; C11 += c11;

        // 3
        a0 = A0[2];  c00 = a0 * b0; C00 += c00;
        a1 = A0[18]; c10 = a1 * b0; C10 += c10;
        b1 = B0[18]; c01 = a0 * b1; C01 += c01;
        b0 = B0[3];  c11 = a1 * b1; C11 += c11;

        // 4
        a0 = A0[3];  c00 = a0 * b0; C00 += c00;
        a1 = A0[19]; c10 = a1 * b0; C10 += c10;
        b1 = B0[19]; c01 = a0 * b1; C01 += c01;
        b0 = B0[4];  c11 = a1 * b1; C11 += c11;

        // 5
        a0 = A0[4];  c00 = a0 * b0; C00 += c00;
        a1 = A0[20]; c10 = a1 * b0; C10 += c10;
        b1 = B0[20]; c01 = a0 * b1; C01 += c01;
        b0 = B0[5];  c11 = a1 * b1; C11 += c11;

        // 6
        a0 = A0[5];  c00 = a0 * b0; C00 += c00;
        a1 = A0[21]; c10 = a1 * b0; C10 += c10;
        b1 = B0[21]; c01 = a0 * b1; C01 += c01;
        b0 = B0[6];  c11 = a1 * b1; C11 += c11;

        // 7
        a0 = A0[6];  c00 = a0 * b0; C00 += c00;
        a1 = A0[22]; c10 = a1 * b0; C10 += c10;
        b1 = B0[22]; c01 = a0 * b1; C01 += c01;
        b0 = B0[7];  c11 = a1 * b1; C11 += c11;

        // 8
        a0 = A0[7];  c00 = a0 * b0; C00 += c00;
        a1 = A0[23]; c10 = a1 * b0; C10 += c10;
        b1 = B0[23]; c01 = a0 * b1; C01 += c01;
        b0 = B0[8];  c11 = a1 * b1; C11 += c11;

        // 9
        a0 = A0[8];  c00 = a0 * b0; C00 += c00;
        a1 = A0[24]; c10 = a1 * b0; C10 += c10;
        b1 = B0[24]; c01 = a0 * b1; C01 += c01;
        b0 = B0[9];  c11 = a1 * b1; C11 += c11;

        // 10
        a0 = A0[9];  c00 = a0 * b0; C00 += c00;
        a1 = A0[25]; c10 = a1 * b0; C10 += c10;
        b1 = B0[25]; c01 = a0 * b1; C01 += c01;
        b0 = B0[10]; c11 = a1 * b1; C11 += c11;

        // 11
        a0 = A0[10]; c00 = a0 * b0; C00 += c00;
        a1 = A0[26]; c10 = a1 * b0; C10 += c10;
        b1 = B0[26]; c01 = a0 * b1; C01 += c01;
        b0 = B0[11]; c11 = a1 * b1; C11 += c11;

        // 12
        a0 = A0[11]; c00 = a0 * b0; C00 += c00;
        a1 = A0[27]; c10 = a1 * b0; C10 += c10;
        b1 = B0[27]; c01 = a0 * b1; C01 += c01;
        b0 = B0[12]; c11 = a1 * b1; C11 += c11;

        // 13
        a0 = A0[12]; c00 = a0 * b0; C00 += c00;
        a1 = A0[28]; c10 = a1 * b0; C10 += c10;
        b1 = B0[28]; c01 = a0 * b1; C01 += c01;
        b0 = B0[13]; c11 = a1 * b1; C11 += c11;

        // 14
        a0 = A0[13]; c00 = a0 * b0; C00 += c00;
        a1 = A0[29]; c10 = a1 * b0; C10 += c10;
        b1 = B0[29]; c01 = a0 * b1; C01 += c01;
        b0 = B0[14]; c11 = a1 * b1; C11 += c11;

        // 15
        a0 = A0[14]; c00 = a0 * b0; C00 += c00;
        a1 = A0[30]; c10 = a1 * b0; C10 += c10;
        b1 = B0[30]; c01 = a0 * b1; C01 += c01;
        b0 = B0[15]; c11 = a1 * b1; C11 += c11;

        // 16
        a0 = A0[15]; c00 = a0 * b0; C00 += c00;
        Maybe<add && (ix!=1)>::add(C0[0] , x * C00);
        C00 = Maybe<add && (ix==1)>::select(C0[2]  , T(0));
        a1 = A0[31]; c10 = a1 * b0; C10 += c10;
        Maybe<add && (ix!=1)>::add(C0[1] , x * C10);
        C10 = Maybe<add && (ix==1)>::select(C0[3]  , T(0));
        b1 = B0[31]; c01 = a0 * b1; C01 += c01;
        Maybe<add && (ix!=1)>::add(C0[16] , x * C01);
        C01 = Maybe<add && (ix==1)>::select(C0[18] , T(0));
        c11 = a1 * b1; C11 += c11;
        Maybe<add && (ix!=1)>::add(C0[17] , x * C11);
        C11 = Maybe<add && (ix==1)>::select(C0[19] , T(0));

        // 16
        a0 = A0[47]; c00 = a0 * b0; C00 += c00;
        a1 = A0[63]; c10 = a1 * b0; C10 += c10;
        c01 = a0 * b1; C01 += c01;
        b0 = B0[14]; c11 = a1 * b1; C11 += c11;

        // 15
        a0 = A0[46]; c00 = a0 * b0; C00 += c00;
        a1 = A0[62]; c10 = a1 * b0; C10 += c10;
        b1 = B0[30]; c01 = a0 * b1; C01 += c01;
        b0 = B0[13]; c11 = a1 * b1; C11 += c11;

        // 14
        a0 = A0[45]; c00 = a0 * b0; C00 += c00;
        a1 = A0[61]; c10 = a1 * b0; C10 += c10;
        b1 = B0[29]; c01 = a0 * b1; C01 += c01;
        b0 = B0[12]; c11 = a1 * b1; C11 += c11;

        // 13
        a0 = A0[44]; c00 = a0 * b0; C00 += c00;
        a1 = A0[60]; c10 = a1 * b0; C10 += c10;
        b1 = B0[28]; c01 = a0 * b1; C01 += c01;
        b0 = B0[11]; c11 = a1 * b1; C11 += c11;

        // 12
        a0 = A0[43]; c00 = a0 * b0; C00 += c00;
        a1 = A0[59]; c10 = a1 * b0; C10 += c10;
        b1 = B0[27]; c01 = a0 * b1; C01 += c01;
        b0 = B0[10]; c11 = a1 * b1; C11 += c11;

        // 11
        a0 = A0[42]; c00 = a0 * b0; C00 += c00;
        a1 = A0[58]; c10 = a1 * b0; C10 += c10;
        b1 = B0[26]; c01 = a0 * b1; C01 += c01;
        b0 = B0[9];  c11 = a1 * b1; C11 += c11;

        // 10
        a0 = A0[41]; c00 = a0 * b0; C00 += c00;
        a1 = A0[57]; c10 = a1 * b0; C10 += c10;
        b1 = B0[25]; c01 = a0 * b1; C01 += c01;
        b0 = B0[8];  c11 = a1 * b1; C11 += c11;

        // 9
        a0 = A0[40]; c00 = a0 * b0; C00 += c00;
        a1 = A0[56]; c10 = a1 * b0; C10 += c10;
        b1 = B0[24]; c01 = a0 * b1; C01 += c01;
        b0 = B0[7];  c11 = a1 * b1; C11 += c11;

        // 8
        a0 = A0[39]; c00 = a0 * b0; C00 += c00;
        a1 = A0[55]; c10 = a1 * b0; C10 += c10;
        b1 = B0[23]; c01 = a0 * b1; C01 += c01;
        b0 = B0[6];  c11 = a1 * b1; C11 += c11;

        // 7
        a0 = A0[38]; c00 = a0 * b0; C00 += c00;
        a1 = A0[54]; c10 = a1 * b0; C10 += c10;
        b1 = B0[22]; c01 = a0 * b1; C01 += c01;
        b0 = B0[5];  c11 = a1 * b1; C11 += c11;

        // 6
        a0 = A0[37]; c00 = a0 * b0; C00 += c00;
        a1 = A0[53]; c10 = a1 * b0; C10 += c10;
        b1 = B0[21]; c01 = a0 * b1; C01 += c01;
        b0 = B0[4];  c11 = a1 * b1; C11 += c11;

        // 5
        a0 = A0[36]; c00 = a0 * b0; C00 += c00;
        a1 = A0[52]; c10 = a1 * b0; C10 += c10;
        b1 = B0[20]; c01 = a0 * b1; C01 += c01;
        b0 = B0[3];  c11 = a1 * b1; C11 += c11;

        // 4
        a0 = A0[35]; c00 = a0 * b0; C00 += c00;
        a1 = A0[51]; c10 = a1 * b0; C10 += c10;
        b1 = B0[19]; c01 = a0 * b1; C01 += c01;
        b0 = B0[2];  c11 = a1 * b1; C11 += c11;

        // 3
        a0 = A0[34]; c00 = a0 * b0; C00 += c00;
        a1 = A0[50]; c10 = a1 * b0; C10 += c10;
        b1 = B0[18]; c01 = a0 * b1; C01 += c01;
        b0 = B0[1];  c11 = a1 * b1; C11 += c11;

        // 2
        a0 = A0[33]; c00 = a0 * b0; C00 += c00;
        a1 = A0[49]; c10 = a1 * b0; C10 += c10;
        b1 = B0[17]; c01 = a0 * b1; C01 += c01;
        b0 = B0[0];  c11 = a1 * b1; C11 += c11;

        // 1
        a0 = A0[32]; c00 = a0 * b0; C00 += c00;
        Maybe<add && (ix!=1)>::add(C0[ 2] , x * C00);
        a1 = A0[48]; c10 = a1 * b0; C10 += c10;
        Maybe<add && (ix!=1)>::add(C0[ 3] , x * C10);
        b1 = B0[16]; c01 = a0 * b1; C01 += c01;
        Maybe<add && (ix!=1)>::add(C0[18] , x * C01);
        A0 += 64;    c11 = a1 * b1; C11 += c11;
        Maybe<add && (ix!=1)>::add(C0[19] , x * C11);
        C0 += 4;
      } while (--i2);
      A0 -= 256;
      B0 += 32;
      C0 += 16; 
    } while (--j2);
  }

  template <int ix, class T>
  static void generic_multmm_16_16_16(
      const Scaling<ix,T>& x, const T* A0, const T* B0, T* C0)
  {

  // First the generic one that is always inlined.  We overload this
  // function below as necessary depending on the INST_* definitions.
  template <int ix, class T>
  static void multmm_16_16_16(
      const Scaling<ix,T>& x, const T* A0, const T* B0, T* C0)
  { generic_multmm_16_16_16(x,A0,B0,C0); }

#ifdef TMV_CompilingLibrary
#define TMV_STATIC 
#else
#define TMV_STATIC static
#endif

  // TODO: This is hard-coded for just float, double, int, and long double.
  // Need to use TMV_Inst.h somehow to make it automatic which types
  // get just a declaration, and which get fully defined, so it will work
  // if the user adds more types to the TMV_Inst.h file.

  //
  // float
  //

#if !defined(TMV_CompilingLibrary) && defined(TMV_INST_FLOAT)
  // !comp  inst_float

  template <int ix>
  void multmm_16_16_16(const Scaling<ix,float>& x,
      const float* A, const float* B, float* C0);
#ifdef __SSE__
  template <int ix>
  void multmm_16_16_32(const Scaling<ix,float>& x,
      const float* A, const float* B, float* C0);
  template <int ix>
  void multmm_16_16_64(const Scaling<ix,float>& x,
      const float* A, const float* B, float* C0);
#endif

#elif \
  (defined(TMV_CompilingLibrary) && defined(TMV_INST_FLOAT)) || \
  (!defined(TMV_CompilingLibrary) && !defined(TMV_INST_FLOAT)) 
  // comp   inst_float
  // !comp  !inst_float

  // comp   !inst_float
  // The other option, CompilingLibrary and not INST_FLOAT is completely
  // skipped, since we don't need anything about float then.

#ifdef __SSE__
  // If we have SSE commands available, we have special versions for float
  template <int ix>
  TMV_STATIC void multmm_16_16_16(const Scaling<ix,float>& x,
      const float* A, const float* B, float* C0)
  {
    const bool add = true;
    __m128 C00, C01, C10, C11;
    __m128 c00, c01, c10, c11;
    union { __m128 xm; float xf[4]; } d00, d01, d10, d11;

    const __m128* A0 = (const __m128*) A;
    const __m128* B0 = (const __m128*) B;

    int i2,j2;

    j2 = 8; do 
    {
      i2 = 4; do
      {
        C00 = _mm_mul_ps(A0[ 0],B0[ 0]); 
        C10 = _mm_mul_ps(A0[ 4],B0[ 0]); 
        C01 = _mm_mul_ps(A0[ 0],B0[ 4]); 
        C11 = _mm_mul_ps(A0[ 4],B0[ 4]); 

        c00 = _mm_mul_ps(A0[ 1],B0[ 1]); C00 = _mm_add_ps(C00,c00);
        c10 = _mm_mul_ps(A0[ 5],B0[ 1]); C10 = _mm_add_ps(C10,c10);
        c01 = _mm_mul_ps(A0[ 1],B0[ 5]); C01 = _mm_add_ps(C01,c01);
        c11 = _mm_mul_ps(A0[ 5],B0[ 5]); C11 = _mm_add_ps(C11,c11);

        c00 = _mm_mul_ps(A0[ 2],B0[ 2]); C00 = _mm_add_ps(C00,c00);
        c10 = _mm_mul_ps(A0[ 6],B0[ 2]); C10 = _mm_add_ps(C10,c10);
        c01 = _mm_mul_ps(A0[ 2],B0[ 6]); C01 = _mm_add_ps(C01,c01);
        c11 = _mm_mul_ps(A0[ 6],B0[ 6]); C11 = _mm_add_ps(C11,c11);

        c00 = _mm_mul_ps(A0[ 3],B0[ 3]); d00.xm = _mm_add_ps(C00,c00);
        c10 = _mm_mul_ps(A0[ 7],B0[ 3]); d10.xm = _mm_add_ps(C10,c10);
        c01 = _mm_mul_ps(A0[ 3],B0[ 7]); d01.xm = _mm_add_ps(C01,c01);
        c11 = _mm_mul_ps(A0[ 7],B0[ 7]); d11.xm = _mm_add_ps(C11,c11);

        Maybe<add>::add(C0[ 0] , x * (
              d00.xf[0] + d00.xf[1] + d00.xf[2] + d00.xf[3]));
        C00 = _mm_mul_ps(A0[11],B0[3]);
        C10 = _mm_mul_ps(A0[15],B0[3]);
        C01 = _mm_mul_ps(A0[11],B0[7]);
        C11 = _mm_mul_ps(A0[15],B0[7]);

        Maybe<add>::add(C0[ 1] , x * (
              d10.xf[0] + d10.xf[1] + d10.xf[2] + d10.xf[3]));
        c00 = _mm_mul_ps(A0[10],B0[2]); C00 = _mm_add_ps(C00,c00);
        c10 = _mm_mul_ps(A0[14],B0[2]); C10 = _mm_add_ps(C10,c10);
        c01 = _mm_mul_ps(A0[10],B0[6]); C01 = _mm_add_ps(C01,c01);
        c11 = _mm_mul_ps(A0[14],B0[6]); C11 = _mm_add_ps(C11,c11);

        Maybe<add>::add(C0[16] , x * (
              d01.xf[0] + d01.xf[1] + d01.xf[2] + d01.xf[3]));
        c00 = _mm_mul_ps(A0[ 9],B0[1]); C00 = _mm_add_ps(C00,c00);
        c10 = _mm_mul_ps(A0[13],B0[1]); C10 = _mm_add_ps(C10,c10);
        c01 = _mm_mul_ps(A0[ 9],B0[5]); C01 = _mm_add_ps(C01,c01);
        c11 = _mm_mul_ps(A0[13],B0[5]); C11 = _mm_add_ps(C11,c11);

        Maybe<add>::add(C0[17] , x * (
              d11.xf[0] + d11.xf[1] + d11.xf[2] + d11.xf[3]));
        c00 = _mm_mul_ps(A0[ 8],B0[0]); d00.xm = _mm_add_ps(C00,c00);
        c10 = _mm_mul_ps(A0[12],B0[0]); d10.xm = _mm_add_ps(C10,c10);
        c01 = _mm_mul_ps(A0[ 8],B0[4]); d01.xm = _mm_add_ps(C01,c01);
        c11 = _mm_mul_ps(A0[12],B0[4]); d11.xm = _mm_add_ps(C11,c11);

        Maybe<add>::add(C0[ 2] , x * (
              d00.xf[0] + d00.xf[1] + d00.xf[2] + d00.xf[3]));
        Maybe<add>::add(C0[ 3] , x * (
              d10.xf[0] + d10.xf[1] + d10.xf[2] + d10.xf[3]));
        Maybe<add>::add(C0[18] , x * (
              d01.xf[0] + d01.xf[1] + d01.xf[2] + d01.xf[3]));
        Maybe<add>::add(C0[19] , x * (
              d11.xf[0] + d11.xf[1] + d11.xf[2] + d11.xf[3]));

        A0 += 16;
        C0 += 4;
      } while (--i2);
      A0 -= 64;
      B0 += 8;
      C0 += 16;
    } while (--j2);
  }
  template <int ix>
  TMV_STATIC void multmm_16_16_32(const Scaling<ix,float>& x,
      const float* A, const float* B, float* C0)
  {
    const bool add = true;
    __m128 C00, C01, C10, C11;
    __m128 c00, c01, c10, c11;
    union { __m128 xm; float xf[4]; } d00, d01, d10, d11;

    const __m128* A0 = (const __m128*) A;
    const __m128* B0 = (const __m128*) B;

    int i2,j2;

    j2 = 8; do 
    {
      i2 = 4; do
      {
        C00 = _mm_mul_ps(A0[ 0],B0[ 0]); 
        C10 = _mm_mul_ps(A0[ 8],B0[ 0]); 
        C01 = _mm_mul_ps(A0[ 0],B0[ 8]); 
        C11 = _mm_mul_ps(A0[ 8],B0[ 8]); 

        c00 = _mm_mul_ps(A0[ 1],B0[ 1]); C00 = _mm_add_ps(C00,c00);
        c10 = _mm_mul_ps(A0[ 9],B0[ 1]); C10 = _mm_add_ps(C10,c10);
        c01 = _mm_mul_ps(A0[ 1],B0[ 9]); C01 = _mm_add_ps(C01,c01);
        c11 = _mm_mul_ps(A0[ 9],B0[ 9]); C11 = _mm_add_ps(C11,c11);

        c00 = _mm_mul_ps(A0[ 2],B0[ 2]); C00 = _mm_add_ps(C00,c00);
        c10 = _mm_mul_ps(A0[10],B0[ 2]); C10 = _mm_add_ps(C10,c10);
        c01 = _mm_mul_ps(A0[ 2],B0[10]); C01 = _mm_add_ps(C01,c01);
        c11 = _mm_mul_ps(A0[10],B0[10]); C11 = _mm_add_ps(C11,c11);

        c00 = _mm_mul_ps(A0[ 3],B0[ 3]); C00 = _mm_add_ps(C00,c00);
        c10 = _mm_mul_ps(A0[11],B0[ 3]); C10 = _mm_add_ps(C10,c10);
        c01 = _mm_mul_ps(A0[ 3],B0[11]); C01 = _mm_add_ps(C01,c01);
        c11 = _mm_mul_ps(A0[11],B0[11]); C11 = _mm_add_ps(C11,c11);

        c00 = _mm_mul_ps(A0[ 4],B0[ 4]); C00 = _mm_add_ps(C00,c00);
        c10 = _mm_mul_ps(A0[12],B0[ 4]); C10 = _mm_add_ps(C10,c10);
        c01 = _mm_mul_ps(A0[ 4],B0[12]); C01 = _mm_add_ps(C01,c01);
        c11 = _mm_mul_ps(A0[12],B0[12]); C11 = _mm_add_ps(C11,c11);

        c00 = _mm_mul_ps(A0[ 5],B0[ 5]); C00 = _mm_add_ps(C00,c00);
        c10 = _mm_mul_ps(A0[13],B0[ 5]); C10 = _mm_add_ps(C10,c10);
        c01 = _mm_mul_ps(A0[ 5],B0[13]); C01 = _mm_add_ps(C01,c01);
        c11 = _mm_mul_ps(A0[13],B0[13]); C11 = _mm_add_ps(C11,c11);

        c00 = _mm_mul_ps(A0[ 6],B0[ 6]); C00 = _mm_add_ps(C00,c00);
        c10 = _mm_mul_ps(A0[14],B0[ 6]); C10 = _mm_add_ps(C10,c10);
        c01 = _mm_mul_ps(A0[ 6],B0[14]); C01 = _mm_add_ps(C01,c01);
        c11 = _mm_mul_ps(A0[14],B0[14]); C11 = _mm_add_ps(C11,c11);

        c00 = _mm_mul_ps(A0[ 7],B0[ 7]); d00.xm = _mm_add_ps(C00,c00);
        c10 = _mm_mul_ps(A0[15],B0[ 7]); d10.xm = _mm_add_ps(C10,c10);
        c01 = _mm_mul_ps(A0[ 7],B0[15]); d01.xm = _mm_add_ps(C01,c01);
        c11 = _mm_mul_ps(A0[15],B0[15]); d11.xm = _mm_add_ps(C11,c11);

        Maybe<add>::add(C0[ 0] , x * (
              d00.xf[0] + d00.xf[1] + d00.xf[2] + d00.xf[3]));
        C00 = _mm_mul_ps(A0[23],B0[ 7]);
        C10 = _mm_mul_ps(A0[31],B0[ 7]);
        C01 = _mm_mul_ps(A0[23],B0[15]);
        C11 = _mm_mul_ps(A0[31],B0[15]);

        Maybe<add>::add(C0[ 1] , x * (
              d10.xf[0] + d10.xf[1] + d10.xf[2] + d10.xf[3]));
        c00 = _mm_mul_ps(A0[22],B0[ 6]); C00 = _mm_add_ps(C00,c00);
        c10 = _mm_mul_ps(A0[30],B0[ 6]); C10 = _mm_add_ps(C10,c10);
        c01 = _mm_mul_ps(A0[22],B0[14]); C01 = _mm_add_ps(C01,c01);
        c11 = _mm_mul_ps(A0[30],B0[14]); C11 = _mm_add_ps(C11,c11);

        Maybe<add>::add(C0[16] , x * (
              d01.xf[0] + d01.xf[1] + d01.xf[2] + d01.xf[3]));
        c00 = _mm_mul_ps(A0[21],B0[ 5]); C00 = _mm_add_ps(C00,c00);
        c10 = _mm_mul_ps(A0[29],B0[ 5]); C10 = _mm_add_ps(C10,c10);
        c01 = _mm_mul_ps(A0[21],B0[13]); C01 = _mm_add_ps(C01,c01);
        c11 = _mm_mul_ps(A0[29],B0[13]); C11 = _mm_add_ps(C11,c11);

        Maybe<add>::add(C0[17] , x * (
              d11.xf[0] + d11.xf[1] + d11.xf[2] + d11.xf[3]));
        c00 = _mm_mul_ps(A0[20],B0[ 4]); C00 = _mm_add_ps(C00,c00);
        c10 = _mm_mul_ps(A0[28],B0[ 4]); C10 = _mm_add_ps(C10,c10);
        c01 = _mm_mul_ps(A0[20],B0[12]); C01 = _mm_add_ps(C01,c01);
        c11 = _mm_mul_ps(A0[28],B0[12]); C11 = _mm_add_ps(C11,c11);

        c00 = _mm_mul_ps(A0[19],B0[ 3]); C00 = _mm_add_ps(C00,c00);
        c10 = _mm_mul_ps(A0[27],B0[ 3]); C10 = _mm_add_ps(C10,c10);
        c01 = _mm_mul_ps(A0[19],B0[11]); C01 = _mm_add_ps(C01,c01);
        c11 = _mm_mul_ps(A0[27],B0[11]); C11 = _mm_add_ps(C11,c11);

        c00 = _mm_mul_ps(A0[18],B0[ 2]); C00 = _mm_add_ps(C00,c00);
        c10 = _mm_mul_ps(A0[26],B0[ 2]); C10 = _mm_add_ps(C10,c10);
        c01 = _mm_mul_ps(A0[18],B0[10]); C01 = _mm_add_ps(C01,c01);
        c11 = _mm_mul_ps(A0[26],B0[10]); C11 = _mm_add_ps(C11,c11);

        c00 = _mm_mul_ps(A0[17],B0[ 1]); C00 = _mm_add_ps(C00,c00);
        c10 = _mm_mul_ps(A0[25],B0[ 1]); C10 = _mm_add_ps(C10,c10);
        c01 = _mm_mul_ps(A0[17],B0[ 9]); C01 = _mm_add_ps(C01,c01);
        c11 = _mm_mul_ps(A0[25],B0[ 9]); C11 = _mm_add_ps(C11,c11);

        c00 = _mm_mul_ps(A0[16],B0[ 0]); d00.xm = _mm_add_ps(C00,c00);
        c10 = _mm_mul_ps(A0[24],B0[ 0]); d10.xm = _mm_add_ps(C10,c10);
        c01 = _mm_mul_ps(A0[16],B0[ 8]); d01.xm = _mm_add_ps(C01,c01);
        c11 = _mm_mul_ps(A0[24],B0[ 8]); d11.xm = _mm_add_ps(C11,c11);

        Maybe<add>::add(C0[ 2] , x * (
              d00.xf[0] + d00.xf[1] + d00.xf[2] + d00.xf[3]));
        Maybe<add>::add(C0[ 3] , x * (
              d10.xf[0] + d10.xf[1] + d10.xf[2] + d10.xf[3]));
        Maybe<add>::add(C0[18] , x * (
              d01.xf[0] + d01.xf[1] + d01.xf[2] + d01.xf[3]));
        Maybe<add>::add(C0[19] , x * (
              d11.xf[0] + d11.xf[1] + d11.xf[2] + d11.xf[3]));

        A0 += 32;
        C0 += 4;
      } while (--i2);
      A0 -= 128;
      B0 += 16;
      C0 += 16;
    } while (--j2);
  }
  template <int ix>
  TMV_STATIC void multmm_16_16_64(const Scaling<ix,float>& x,
      const float* A, const float* B, float* C0)
  {
    const bool add = true;
    __m128 C00, C01, C10, C11;
    __m128 c00, c01, c10, c11;
    union { __m128 xm; float xf[4]; } d00, d01, d10, d11;

    const __m128* A0 = (const __m128*) A;
    const __m128* B0 = (const __m128*) B;

    int i2,j2;

    j2 = 8; do 
    {
      i2 = 4; do
      {
        C00 = _mm_mul_ps(A0[ 0],B0[ 0]); 
        C10 = _mm_mul_ps(A0[16],B0[ 0]); 
        C01 = _mm_mul_ps(A0[ 0],B0[16]); 
        C11 = _mm_mul_ps(A0[16],B0[16]); 

        c00 = _mm_mul_ps(A0[ 1],B0[ 1]); C00 = _mm_add_ps(C00,c00);
        c10 = _mm_mul_ps(A0[17],B0[ 1]); C10 = _mm_add_ps(C10,c10);
        c01 = _mm_mul_ps(A0[ 1],B0[17]); C01 = _mm_add_ps(C01,c01);
        c11 = _mm_mul_ps(A0[17],B0[17]); C11 = _mm_add_ps(C11,c11);

        c00 = _mm_mul_ps(A0[ 2],B0[ 2]); C00 = _mm_add_ps(C00,c00);
        c10 = _mm_mul_ps(A0[18],B0[ 2]); C10 = _mm_add_ps(C10,c10);
        c01 = _mm_mul_ps(A0[ 2],B0[18]); C01 = _mm_add_ps(C01,c01);
        c11 = _mm_mul_ps(A0[18],B0[18]); C11 = _mm_add_ps(C11,c11);

        c00 = _mm_mul_ps(A0[ 3],B0[ 3]); C00 = _mm_add_ps(C00,c00);
        c10 = _mm_mul_ps(A0[19],B0[ 3]); C10 = _mm_add_ps(C10,c10);
        c01 = _mm_mul_ps(A0[ 3],B0[19]); C01 = _mm_add_ps(C01,c01);
        c11 = _mm_mul_ps(A0[19],B0[19]); C11 = _mm_add_ps(C11,c11);

        c00 = _mm_mul_ps(A0[ 4],B0[ 4]); C00 = _mm_add_ps(C00,c00);
        c10 = _mm_mul_ps(A0[20],B0[ 4]); C10 = _mm_add_ps(C10,c10);
        c01 = _mm_mul_ps(A0[ 4],B0[20]); C01 = _mm_add_ps(C01,c01);
        c11 = _mm_mul_ps(A0[20],B0[20]); C11 = _mm_add_ps(C11,c11);

        c00 = _mm_mul_ps(A0[ 5],B0[ 5]); C00 = _mm_add_ps(C00,c00);
        c10 = _mm_mul_ps(A0[21],B0[ 5]); C10 = _mm_add_ps(C10,c10);
        c01 = _mm_mul_ps(A0[ 5],B0[21]); C01 = _mm_add_ps(C01,c01);
        c11 = _mm_mul_ps(A0[21],B0[21]); C11 = _mm_add_ps(C11,c11);

        c00 = _mm_mul_ps(A0[ 6],B0[ 6]); C00 = _mm_add_ps(C00,c00);
        c10 = _mm_mul_ps(A0[22],B0[ 6]); C10 = _mm_add_ps(C10,c10);
        c01 = _mm_mul_ps(A0[ 6],B0[22]); C01 = _mm_add_ps(C01,c01);
        c11 = _mm_mul_ps(A0[22],B0[22]); C11 = _mm_add_ps(C11,c11);

        c00 = _mm_mul_ps(A0[ 7],B0[ 7]); C00 = _mm_add_ps(C00,c00);
        c10 = _mm_mul_ps(A0[23],B0[ 7]); C10 = _mm_add_ps(C10,c10);
        c01 = _mm_mul_ps(A0[ 7],B0[23]); C01 = _mm_add_ps(C01,c01);
        c11 = _mm_mul_ps(A0[23],B0[23]); C11 = _mm_add_ps(C11,c11);

        c00 = _mm_mul_ps(A0[ 8],B0[ 8]); C00 = _mm_add_ps(C00,c00);
        c10 = _mm_mul_ps(A0[24],B0[ 8]); C10 = _mm_add_ps(C10,c10);
        c01 = _mm_mul_ps(A0[ 8],B0[24]); C01 = _mm_add_ps(C01,c01);
        c11 = _mm_mul_ps(A0[24],B0[24]); C11 = _mm_add_ps(C11,c11);

        c00 = _mm_mul_ps(A0[ 9],B0[ 9]); C00 = _mm_add_ps(C00,c00);
        c10 = _mm_mul_ps(A0[25],B0[ 9]); C10 = _mm_add_ps(C10,c10);
        c01 = _mm_mul_ps(A0[ 9],B0[25]); C01 = _mm_add_ps(C01,c01);
        c11 = _mm_mul_ps(A0[25],B0[25]); C11 = _mm_add_ps(C11,c11);

        c00 = _mm_mul_ps(A0[10],B0[10]); C00 = _mm_add_ps(C00,c00);
        c10 = _mm_mul_ps(A0[26],B0[10]); C10 = _mm_add_ps(C10,c10);
        c01 = _mm_mul_ps(A0[10],B0[26]); C01 = _mm_add_ps(C01,c01);
        c11 = _mm_mul_ps(A0[26],B0[26]); C11 = _mm_add_ps(C11,c11);

        c00 = _mm_mul_ps(A0[11],B0[11]); C00 = _mm_add_ps(C00,c00);
        c10 = _mm_mul_ps(A0[27],B0[11]); C10 = _mm_add_ps(C10,c10);
        c01 = _mm_mul_ps(A0[11],B0[27]); C01 = _mm_add_ps(C01,c01);
        c11 = _mm_mul_ps(A0[27],B0[27]); C11 = _mm_add_ps(C11,c11);

        c00 = _mm_mul_ps(A0[12],B0[12]); C00 = _mm_add_ps(C00,c00);
        c10 = _mm_mul_ps(A0[28],B0[12]); C10 = _mm_add_ps(C10,c10);
        c01 = _mm_mul_ps(A0[12],B0[28]); C01 = _mm_add_ps(C01,c01);
        c11 = _mm_mul_ps(A0[28],B0[28]); C11 = _mm_add_ps(C11,c11);

        c00 = _mm_mul_ps(A0[13],B0[13]); C00 = _mm_add_ps(C00,c00);
        c10 = _mm_mul_ps(A0[29],B0[13]); C10 = _mm_add_ps(C10,c10);
        c01 = _mm_mul_ps(A0[13],B0[29]); C01 = _mm_add_ps(C01,c01);
        c11 = _mm_mul_ps(A0[29],B0[29]); C11 = _mm_add_ps(C11,c11);

        c00 = _mm_mul_ps(A0[14],B0[14]); C00 = _mm_add_ps(C00,c00);
        c10 = _mm_mul_ps(A0[30],B0[14]); C10 = _mm_add_ps(C10,c10);
        c01 = _mm_mul_ps(A0[14],B0[30]); C01 = _mm_add_ps(C01,c01);
        c11 = _mm_mul_ps(A0[30],B0[30]); C11 = _mm_add_ps(C11,c11);

        c00 = _mm_mul_ps(A0[15],B0[15]); d00.xm = _mm_add_ps(C00,c00);
        c10 = _mm_mul_ps(A0[31],B0[15]); d10.xm = _mm_add_ps(C10,c10);
        c01 = _mm_mul_ps(A0[15],B0[31]); d01.xm = _mm_add_ps(C01,c01);
        c11 = _mm_mul_ps(A0[31],B0[31]); d11.xm = _mm_add_ps(C11,c11);

        Maybe<add>::add(C0[ 0] , x * (
              d00.xf[0] + d00.xf[1] + d00.xf[2] + d00.xf[3]));
        C00 = _mm_mul_ps(A0[47],B0[15]);
        C10 = _mm_mul_ps(A0[63],B0[15]);
        C01 = _mm_mul_ps(A0[47],B0[31]);
        C11 = _mm_mul_ps(A0[63],B0[31]);

        Maybe<add>::add(C0[ 1] , x * (
              d10.xf[0] + d10.xf[1] + d10.xf[2] + d10.xf[3]));
        c00 = _mm_mul_ps(A0[46],B0[14]); C00 = _mm_add_ps(C00,c00);
        c10 = _mm_mul_ps(A0[62],B0[14]); C10 = _mm_add_ps(C10,c10);
        c01 = _mm_mul_ps(A0[46],B0[30]); C01 = _mm_add_ps(C01,c01);
        c11 = _mm_mul_ps(A0[62],B0[30]); C11 = _mm_add_ps(C11,c11);

        Maybe<add>::add(C0[16] , x * (
              d01.xf[0] + d01.xf[1] + d01.xf[2] + d01.xf[3]));
        c00 = _mm_mul_ps(A0[45],B0[13]); C00 = _mm_add_ps(C00,c00);
        c10 = _mm_mul_ps(A0[61],B0[13]); C10 = _mm_add_ps(C10,c10);
        c01 = _mm_mul_ps(A0[45],B0[29]); C01 = _mm_add_ps(C01,c01);
        c11 = _mm_mul_ps(A0[61],B0[29]); C11 = _mm_add_ps(C11,c11);

        Maybe<add>::add(C0[17] , x * (
              d11.xf[0] + d11.xf[1] + d11.xf[2] + d11.xf[3]));
        c00 = _mm_mul_ps(A0[44],B0[12]); C00 = _mm_add_ps(C00,c00);
        c10 = _mm_mul_ps(A0[60],B0[12]); C10 = _mm_add_ps(C10,c10);
        c01 = _mm_mul_ps(A0[44],B0[28]); C01 = _mm_add_ps(C01,c01);
        c11 = _mm_mul_ps(A0[60],B0[28]); C11 = _mm_add_ps(C11,c11);

        c00 = _mm_mul_ps(A0[43],B0[11]); C00 = _mm_add_ps(C00,c00);
        c10 = _mm_mul_ps(A0[59],B0[11]); C10 = _mm_add_ps(C10,c10);
        c01 = _mm_mul_ps(A0[43],B0[27]); C01 = _mm_add_ps(C01,c01);
        c11 = _mm_mul_ps(A0[59],B0[27]); C11 = _mm_add_ps(C11,c11);

        c00 = _mm_mul_ps(A0[42],B0[10]); C00 = _mm_add_ps(C00,c00);
        c10 = _mm_mul_ps(A0[58],B0[10]); C10 = _mm_add_ps(C10,c10);
        c01 = _mm_mul_ps(A0[42],B0[26]); C01 = _mm_add_ps(C01,c01);
        c11 = _mm_mul_ps(A0[58],B0[26]); C11 = _mm_add_ps(C11,c11);

        c00 = _mm_mul_ps(A0[41],B0[ 9]); C00 = _mm_add_ps(C00,c00);
        c10 = _mm_mul_ps(A0[57],B0[ 9]); C10 = _mm_add_ps(C10,c10);
        c01 = _mm_mul_ps(A0[41],B0[25]); C01 = _mm_add_ps(C01,c01);
        c11 = _mm_mul_ps(A0[57],B0[25]); C11 = _mm_add_ps(C11,c11);

        c00 = _mm_mul_ps(A0[40],B0[ 8]); C00 = _mm_add_ps(C00,c00);
        c10 = _mm_mul_ps(A0[56],B0[ 8]); C10 = _mm_add_ps(C10,c10);
        c01 = _mm_mul_ps(A0[40],B0[24]); C01 = _mm_add_ps(C01,c01);
        c11 = _mm_mul_ps(A0[56],B0[24]); C11 = _mm_add_ps(C11,c11);

        c00 = _mm_mul_ps(A0[39],B0[ 7]); C00 = _mm_add_ps(C00,c00);
        c10 = _mm_mul_ps(A0[55],B0[ 7]); C10 = _mm_add_ps(C10,c10);
        c01 = _mm_mul_ps(A0[39],B0[23]); C01 = _mm_add_ps(C01,c01);
        c11 = _mm_mul_ps(A0[55],B0[23]); C11 = _mm_add_ps(C11,c11);

        c00 = _mm_mul_ps(A0[38],B0[ 6]); C00 = _mm_add_ps(C00,c00);
        c10 = _mm_mul_ps(A0[54],B0[ 6]); C10 = _mm_add_ps(C10,c10);
        c01 = _mm_mul_ps(A0[38],B0[22]); C01 = _mm_add_ps(C01,c01);
        c11 = _mm_mul_ps(A0[54],B0[22]); C11 = _mm_add_ps(C11,c11);

        c00 = _mm_mul_ps(A0[37],B0[ 5]); C00 = _mm_add_ps(C00,c00);
        c10 = _mm_mul_ps(A0[53],B0[ 5]); C10 = _mm_add_ps(C10,c10);
        c01 = _mm_mul_ps(A0[37],B0[21]); C01 = _mm_add_ps(C01,c01);
        c11 = _mm_mul_ps(A0[53],B0[21]); C11 = _mm_add_ps(C11,c11);

        c00 = _mm_mul_ps(A0[36],B0[ 4]); C00 = _mm_add_ps(C00,c00);
        c10 = _mm_mul_ps(A0[52],B0[ 4]); C10 = _mm_add_ps(C10,c10);
        c01 = _mm_mul_ps(A0[36],B0[20]); C01 = _mm_add_ps(C01,c01);
        c11 = _mm_mul_ps(A0[52],B0[20]); C11 = _mm_add_ps(C11,c11);

        c00 = _mm_mul_ps(A0[35],B0[ 3]); C00 = _mm_add_ps(C00,c00);
        c10 = _mm_mul_ps(A0[51],B0[ 3]); C10 = _mm_add_ps(C10,c10);
        c01 = _mm_mul_ps(A0[35],B0[19]); C01 = _mm_add_ps(C01,c01);
        c11 = _mm_mul_ps(A0[51],B0[19]); C11 = _mm_add_ps(C11,c11);

        c00 = _mm_mul_ps(A0[34],B0[ 2]); C00 = _mm_add_ps(C00,c00);
        c10 = _mm_mul_ps(A0[50],B0[ 2]); C10 = _mm_add_ps(C10,c10);
        c01 = _mm_mul_ps(A0[34],B0[18]); C01 = _mm_add_ps(C01,c01);
        c11 = _mm_mul_ps(A0[50],B0[18]); C11 = _mm_add_ps(C11,c11);

        c00 = _mm_mul_ps(A0[33],B0[ 1]); C00 = _mm_add_ps(C00,c00);
        c10 = _mm_mul_ps(A0[49],B0[ 1]); C10 = _mm_add_ps(C10,c10);
        c01 = _mm_mul_ps(A0[33],B0[17]); C01 = _mm_add_ps(C01,c01);
        c11 = _mm_mul_ps(A0[49],B0[17]); C11 = _mm_add_ps(C11,c11);

        c00 = _mm_mul_ps(A0[32],B0[ 0]); d00.xm = _mm_add_ps(C00,c00);
        c10 = _mm_mul_ps(A0[48],B0[ 0]); d10.xm = _mm_add_ps(C10,c10);
        c01 = _mm_mul_ps(A0[32],B0[16]); d01.xm = _mm_add_ps(C01,c01);
        c11 = _mm_mul_ps(A0[48],B0[16]); d11.xm = _mm_add_ps(C11,c11);

        Maybe<add>::add(C0[ 2] , x * (
              d00.xf[0] + d00.xf[1] + d00.xf[2] + d00.xf[3]));
        Maybe<add>::add(C0[ 3] , x * (
              d10.xf[0] + d10.xf[1] + d10.xf[2] + d10.xf[3]));
        Maybe<add>::add(C0[18] , x * (
              d01.xf[0] + d01.xf[1] + d01.xf[2] + d01.xf[3]));
        Maybe<add>::add(C0[19] , x * (
              d11.xf[0] + d11.xf[1] + d11.xf[2] + d11.xf[3]));

        A0 += 64;
        C0 += 4;
      } while (--i2);
      A0 -= 256;
      B0 += 32;
      C0 += 16;
    } while (--j2);
  }
#else
  // If no SSE, then repeat the 16 block version to call generic.
  template <int ix>
  TMV_STATIC void multmm_16_16_16(const Scaling<ix,float>& x,
      const float* A, const float* B, float* C0)
  { generic_multmm_16_16_16(x,A,B,C0); }
#endif

#endif  // End float


#if !defined(TMV_CompilingLibrary) && defined(TMV_INST_DOUBLE)

  template <int ix>
  void multmm_16_16_16(const Scaling<ix,double>& x,
      const double* A, const double* B, double* C0);
#ifdef __SSE2__
  template <int ix>
  void multmm_16_16_32(const Scaling<ix,double>& x,
      const double* A, const double* B, double* C0);
#endif

#elif \
  (defined(TMV_CompilingLibrary) && defined(TMV_INST_DOUBLE)) || \
  (!defined(TMV_CompilingLibrary) && !defined(TMV_INST_DOUBLE)) 

#ifdef __SSE2__
  // If we have SSE2 commands available, we have special versions for double
  template <int ix>
  TMV_STATIC void multmm_16_16_16(const Scaling<ix,double>& x,
      const double* A, const double* B, double* C0)
  {
    const bool add = true;
    __m128d C00, C01, C10, C11;
    __m128d c00, c01, c10, c11;
    union { __m128d xm; double xd[2]; } d00, d01, d10, d11;

    const __m128d* A0 = (const __m128d*) A;
    const __m128d* B0 = (const __m128d*) B;

    int i2,j2;

    j2 = 8; do 
    {
      i2 = 4; do 
      {
        C00 = _mm_mul_pd(A0[ 0],B0[ 0]); 
        C10 = _mm_mul_pd(A0[ 8],B0[ 0]); 
        C01 = _mm_mul_pd(A0[ 0],B0[ 8]); 
        C11 = _mm_mul_pd(A0[ 8],B0[ 8]); 

        c00 = _mm_mul_pd(A0[ 1],B0[ 1]); C00 = _mm_add_pd(C00,c00);
        c10 = _mm_mul_pd(A0[ 9],B0[ 1]); C10 = _mm_add_pd(C10,c10);
        c01 = _mm_mul_pd(A0[ 1],B0[ 9]); C01 = _mm_add_pd(C01,c01);
        c11 = _mm_mul_pd(A0[ 9],B0[ 9]); C11 = _mm_add_pd(C11,c11);

        c00 = _mm_mul_pd(A0[ 2],B0[ 2]); C00 = _mm_add_pd(C00,c00);
        c10 = _mm_mul_pd(A0[10],B0[ 2]); C10 = _mm_add_pd(C10,c10);
        c01 = _mm_mul_pd(A0[ 2],B0[10]); C01 = _mm_add_pd(C01,c01);
        c11 = _mm_mul_pd(A0[10],B0[10]); C11 = _mm_add_pd(C11,c11);

        c00 = _mm_mul_pd(A0[ 3],B0[ 3]); C00 = _mm_add_pd(C00,c00);
        c10 = _mm_mul_pd(A0[11],B0[ 3]); C10 = _mm_add_pd(C10,c10);
        c01 = _mm_mul_pd(A0[ 3],B0[11]); C01 = _mm_add_pd(C01,c01);
        c11 = _mm_mul_pd(A0[11],B0[11]); C11 = _mm_add_pd(C11,c11);

        c00 = _mm_mul_pd(A0[ 4],B0[ 4]); C00 = _mm_add_pd(C00,c00);
        c10 = _mm_mul_pd(A0[12],B0[ 4]); C10 = _mm_add_pd(C10,c10);
        c01 = _mm_mul_pd(A0[ 4],B0[12]); C01 = _mm_add_pd(C01,c01);
        c11 = _mm_mul_pd(A0[12],B0[12]); C11 = _mm_add_pd(C11,c11);

        c00 = _mm_mul_pd(A0[ 5],B0[ 5]); C00 = _mm_add_pd(C00,c00);
        c10 = _mm_mul_pd(A0[13],B0[ 5]); C10 = _mm_add_pd(C10,c10);
        c01 = _mm_mul_pd(A0[ 5],B0[13]); C01 = _mm_add_pd(C01,c01);
        c11 = _mm_mul_pd(A0[13],B0[13]); C11 = _mm_add_pd(C11,c11);

        c00 = _mm_mul_pd(A0[ 6],B0[ 6]); C00 = _mm_add_pd(C00,c00);
        c10 = _mm_mul_pd(A0[14],B0[ 6]); C10 = _mm_add_pd(C10,c10);
        c01 = _mm_mul_pd(A0[ 6],B0[14]); C01 = _mm_add_pd(C01,c01);
        c11 = _mm_mul_pd(A0[14],B0[14]); C11 = _mm_add_pd(C11,c11);

        c00 = _mm_mul_pd(A0[ 7],B0[ 7]); d00.xm = _mm_add_pd(C00,c00);
        c10 = _mm_mul_pd(A0[15],B0[ 7]); d10.xm = _mm_add_pd(C10,c10);
        c01 = _mm_mul_pd(A0[ 7],B0[15]); d01.xm = _mm_add_pd(C01,c01);
        c11 = _mm_mul_pd(A0[15],B0[15]); d11.xm = _mm_add_pd(C11,c11);

        Maybe<add>::add(C0[ 0] , x * (d00.xd[0] + d00.xd[1]));
        C00 = _mm_mul_pd(A0[23],B0[ 7]);
        C10 = _mm_mul_pd(A0[31],B0[ 7]);
        C01 = _mm_mul_pd(A0[23],B0[15]);
        C11 = _mm_mul_pd(A0[31],B0[15]);

        Maybe<add>::add(C0[ 1] , x * (d10.xd[0] + d10.xd[1]));
        c00 = _mm_mul_pd(A0[22],B0[ 6]); C00 = _mm_add_pd(C00,c00);
        c10 = _mm_mul_pd(A0[30],B0[ 6]); C10 = _mm_add_pd(C10,c10);
        c01 = _mm_mul_pd(A0[22],B0[14]); C01 = _mm_add_pd(C01,c01);
        c11 = _mm_mul_pd(A0[30],B0[14]); C11 = _mm_add_pd(C11,c11);

        Maybe<add>::add(C0[16] , x * (d01.xd[0] + d01.xd[1]));
        c00 = _mm_mul_pd(A0[21],B0[ 5]); C00 = _mm_add_pd(C00,c00);
        c10 = _mm_mul_pd(A0[29],B0[ 5]); C10 = _mm_add_pd(C10,c10);
        c01 = _mm_mul_pd(A0[21],B0[13]); C01 = _mm_add_pd(C01,c01);
        c11 = _mm_mul_pd(A0[29],B0[13]); C11 = _mm_add_pd(C11,c11);

        Maybe<add>::add(C0[17] , x * (d11.xd[0] + d11.xd[1]));
        c00 = _mm_mul_pd(A0[20],B0[ 4]); C00 = _mm_add_pd(C00,c00);
        c10 = _mm_mul_pd(A0[28],B0[ 4]); C10 = _mm_add_pd(C10,c10);
        c01 = _mm_mul_pd(A0[20],B0[12]); C01 = _mm_add_pd(C01,c01);
        c11 = _mm_mul_pd(A0[28],B0[12]); C11 = _mm_add_pd(C11,c11);

        c00 = _mm_mul_pd(A0[19],B0[ 3]); C00 = _mm_add_pd(C00,c00);
        c10 = _mm_mul_pd(A0[27],B0[ 3]); C10 = _mm_add_pd(C10,c10);
        c01 = _mm_mul_pd(A0[19],B0[11]); C01 = _mm_add_pd(C01,c01);
        c11 = _mm_mul_pd(A0[27],B0[11]); C11 = _mm_add_pd(C11,c11);

        c00 = _mm_mul_pd(A0[18],B0[ 2]); C00 = _mm_add_pd(C00,c00);
        c10 = _mm_mul_pd(A0[26],B0[ 2]); C10 = _mm_add_pd(C10,c10);
        c01 = _mm_mul_pd(A0[18],B0[10]); C01 = _mm_add_pd(C01,c01);
        c11 = _mm_mul_pd(A0[26],B0[10]); C11 = _mm_add_pd(C11,c11);

        c00 = _mm_mul_pd(A0[17],B0[ 1]); C00 = _mm_add_pd(C00,c00);
        c10 = _mm_mul_pd(A0[25],B0[ 1]); C10 = _mm_add_pd(C10,c10);
        c01 = _mm_mul_pd(A0[17],B0[ 9]); C01 = _mm_add_pd(C01,c01);
        c11 = _mm_mul_pd(A0[25],B0[ 9]); C11 = _mm_add_pd(C11,c11);

        c00 = _mm_mul_pd(A0[16],B0[ 0]); d00.xm = _mm_add_pd(C00,c00);
        c10 = _mm_mul_pd(A0[24],B0[ 0]); d10.xm = _mm_add_pd(C10,c10);
        c01 = _mm_mul_pd(A0[16],B0[ 8]); d01.xm = _mm_add_pd(C01,c01);
        c11 = _mm_mul_pd(A0[24],B0[ 8]); d11.xm = _mm_add_pd(C11,c11);

        Maybe<add>::add(C0[ 2] , x * (d00.xd[0] + d00.xd[1]));
        Maybe<add>::add(C0[ 3] , x * (d10.xd[0] + d10.xd[1]));
        Maybe<add>::add(C0[18] , x * (d01.xd[0] + d01.xd[1]));
        Maybe<add>::add(C0[19] , x * (d11.xd[0] + d11.xd[1]));

        A0 += 32;
        C0 += 4;
      } while (--i2);
      A0 -= 128;
      B0 += 16;
      C0 += 16; 
    } while (--j2);
  }
  template <int ix>
  TMV_STATIC void multmm_16_16_32(const Scaling<ix,double>& x,
      const double* A, const double* B, double* C0)
  {
    const bool add = true;
    __m128d C00, C01, C10, C11;
    __m128d c00, c01, c10, c11;
    union { __m128d xm; double xd[2]; } d00, d01, d10, d11;

    const __m128d* A0 = (const __m128d*) A;
    const __m128d* B0 = (const __m128d*) B;

    int i2,j2;

    j2 = 8; do 
    {
      i2 = 4; do 
      {
        C00 = _mm_mul_pd(A0[ 0],B0[ 0]); 
        C10 = _mm_mul_pd(A0[16],B0[ 0]); 
        C01 = _mm_mul_pd(A0[ 0],B0[16]); 
        C11 = _mm_mul_pd(A0[16],B0[16]); 

        c00 = _mm_mul_pd(A0[ 1],B0[ 1]); C00 = _mm_add_pd(C00,c00);
        c10 = _mm_mul_pd(A0[17],B0[ 1]); C10 = _mm_add_pd(C10,c10);
        c01 = _mm_mul_pd(A0[ 1],B0[17]); C01 = _mm_add_pd(C01,c01);
        c11 = _mm_mul_pd(A0[17],B0[17]); C11 = _mm_add_pd(C11,c11);

        c00 = _mm_mul_pd(A0[ 2],B0[ 2]); C00 = _mm_add_pd(C00,c00);
        c10 = _mm_mul_pd(A0[18],B0[ 2]); C10 = _mm_add_pd(C10,c10);
        c01 = _mm_mul_pd(A0[ 2],B0[18]); C01 = _mm_add_pd(C01,c01);
        c11 = _mm_mul_pd(A0[18],B0[18]); C11 = _mm_add_pd(C11,c11);

        c00 = _mm_mul_pd(A0[ 3],B0[ 3]); C00 = _mm_add_pd(C00,c00);
        c10 = _mm_mul_pd(A0[19],B0[ 3]); C10 = _mm_add_pd(C10,c10);
        c01 = _mm_mul_pd(A0[ 3],B0[19]); C01 = _mm_add_pd(C01,c01);
        c11 = _mm_mul_pd(A0[19],B0[19]); C11 = _mm_add_pd(C11,c11);

        c00 = _mm_mul_pd(A0[ 4],B0[ 4]); C00 = _mm_add_pd(C00,c00);
        c10 = _mm_mul_pd(A0[20],B0[ 4]); C10 = _mm_add_pd(C10,c10);
        c01 = _mm_mul_pd(A0[ 4],B0[20]); C01 = _mm_add_pd(C01,c01);
        c11 = _mm_mul_pd(A0[20],B0[20]); C11 = _mm_add_pd(C11,c11);

        c00 = _mm_mul_pd(A0[ 5],B0[ 5]); C00 = _mm_add_pd(C00,c00);
        c10 = _mm_mul_pd(A0[21],B0[ 5]); C10 = _mm_add_pd(C10,c10);
        c01 = _mm_mul_pd(A0[ 5],B0[21]); C01 = _mm_add_pd(C01,c01);
        c11 = _mm_mul_pd(A0[21],B0[21]); C11 = _mm_add_pd(C11,c11);

        c00 = _mm_mul_pd(A0[ 6],B0[ 6]); C00 = _mm_add_pd(C00,c00);
        c10 = _mm_mul_pd(A0[22],B0[ 6]); C10 = _mm_add_pd(C10,c10);
        c01 = _mm_mul_pd(A0[ 6],B0[22]); C01 = _mm_add_pd(C01,c01);
        c11 = _mm_mul_pd(A0[22],B0[22]); C11 = _mm_add_pd(C11,c11);

        c00 = _mm_mul_pd(A0[ 7],B0[ 7]); C00 = _mm_add_pd(C00,c00);
        c10 = _mm_mul_pd(A0[23],B0[ 7]); C10 = _mm_add_pd(C10,c10);
        c01 = _mm_mul_pd(A0[ 7],B0[23]); C01 = _mm_add_pd(C01,c01);
        c11 = _mm_mul_pd(A0[23],B0[23]); C11 = _mm_add_pd(C11,c11);

        c00 = _mm_mul_pd(A0[ 8],B0[ 8]); C00 = _mm_add_pd(C00,c00);
        c10 = _mm_mul_pd(A0[24],B0[ 8]); C10 = _mm_add_pd(C10,c10);
        c01 = _mm_mul_pd(A0[ 8],B0[24]); C01 = _mm_add_pd(C01,c01);
        c11 = _mm_mul_pd(A0[24],B0[24]); C11 = _mm_add_pd(C11,c11);

        c00 = _mm_mul_pd(A0[ 9],B0[ 9]); C00 = _mm_add_pd(C00,c00);
        c10 = _mm_mul_pd(A0[25],B0[ 9]); C10 = _mm_add_pd(C10,c10);
        c01 = _mm_mul_pd(A0[ 9],B0[25]); C01 = _mm_add_pd(C01,c01);
        c11 = _mm_mul_pd(A0[25],B0[25]); C11 = _mm_add_pd(C11,c11);

        c00 = _mm_mul_pd(A0[10],B0[10]); C00 = _mm_add_pd(C00,c00);
        c10 = _mm_mul_pd(A0[26],B0[10]); C10 = _mm_add_pd(C10,c10);
        c01 = _mm_mul_pd(A0[10],B0[26]); C01 = _mm_add_pd(C01,c01);
        c11 = _mm_mul_pd(A0[26],B0[26]); C11 = _mm_add_pd(C11,c11);

        c00 = _mm_mul_pd(A0[11],B0[11]); C00 = _mm_add_pd(C00,c00);
        c10 = _mm_mul_pd(A0[27],B0[11]); C10 = _mm_add_pd(C10,c10);
        c01 = _mm_mul_pd(A0[11],B0[27]); C01 = _mm_add_pd(C01,c01);
        c11 = _mm_mul_pd(A0[27],B0[27]); C11 = _mm_add_pd(C11,c11);

        c00 = _mm_mul_pd(A0[12],B0[12]); C00 = _mm_add_pd(C00,c00);
        c10 = _mm_mul_pd(A0[28],B0[12]); C10 = _mm_add_pd(C10,c10);
        c01 = _mm_mul_pd(A0[12],B0[28]); C01 = _mm_add_pd(C01,c01);
        c11 = _mm_mul_pd(A0[28],B0[28]); C11 = _mm_add_pd(C11,c11);

        c00 = _mm_mul_pd(A0[13],B0[13]); C00 = _mm_add_pd(C00,c00);
        c10 = _mm_mul_pd(A0[29],B0[13]); C10 = _mm_add_pd(C10,c10);
        c01 = _mm_mul_pd(A0[13],B0[29]); C01 = _mm_add_pd(C01,c01);
        c11 = _mm_mul_pd(A0[29],B0[29]); C11 = _mm_add_pd(C11,c11);

        c00 = _mm_mul_pd(A0[14],B0[14]); C00 = _mm_add_pd(C00,c00);
        c10 = _mm_mul_pd(A0[30],B0[14]); C10 = _mm_add_pd(C10,c10);
        c01 = _mm_mul_pd(A0[14],B0[30]); C01 = _mm_add_pd(C01,c01);
        c11 = _mm_mul_pd(A0[30],B0[30]); C11 = _mm_add_pd(C11,c11);

        c00 = _mm_mul_pd(A0[15],B0[15]); d00.xm = _mm_add_pd(C00,c00);
        c10 = _mm_mul_pd(A0[31],B0[15]); d10.xm = _mm_add_pd(C10,c10);
        c01 = _mm_mul_pd(A0[15],B0[31]); d01.xm = _mm_add_pd(C01,c01);
        c11 = _mm_mul_pd(A0[31],B0[31]); d11.xm = _mm_add_pd(C11,c11);

        Maybe<add>::add(C0[ 0] , x * (d00.xd[0] + d00.xd[1]));
        C00 = _mm_mul_pd(A0[47],B0[15]);
        C10 = _mm_mul_pd(A0[63],B0[15]);
        C01 = _mm_mul_pd(A0[47],B0[31]);
        C11 = _mm_mul_pd(A0[63],B0[31]);

        Maybe<add>::add(C0[ 1] , x * (d10.xd[0] + d10.xd[1]));
        c00 = _mm_mul_pd(A0[46],B0[14]); C00 = _mm_add_pd(C00,c00);
        c10 = _mm_mul_pd(A0[62],B0[14]); C10 = _mm_add_pd(C10,c10);
        c01 = _mm_mul_pd(A0[46],B0[30]); C01 = _mm_add_pd(C01,c01);
        c11 = _mm_mul_pd(A0[62],B0[30]); C11 = _mm_add_pd(C11,c11);

        Maybe<add>::add(C0[16] , x * (d01.xd[0] + d01.xd[1]));
        c00 = _mm_mul_pd(A0[45],B0[13]); C00 = _mm_add_pd(C00,c00);
        c10 = _mm_mul_pd(A0[61],B0[13]); C10 = _mm_add_pd(C10,c10);
        c01 = _mm_mul_pd(A0[45],B0[29]); C01 = _mm_add_pd(C01,c01);
        c11 = _mm_mul_pd(A0[61],B0[29]); C11 = _mm_add_pd(C11,c11);

        Maybe<add>::add(C0[17] , x * (d11.xd[0] + d11.xd[1]));
        c00 = _mm_mul_pd(A0[44],B0[12]); C00 = _mm_add_pd(C00,c00);
        c10 = _mm_mul_pd(A0[60],B0[12]); C10 = _mm_add_pd(C10,c10);
        c01 = _mm_mul_pd(A0[44],B0[28]); C01 = _mm_add_pd(C01,c01);
        c11 = _mm_mul_pd(A0[60],B0[28]); C11 = _mm_add_pd(C11,c11);

        c00 = _mm_mul_pd(A0[43],B0[11]); C00 = _mm_add_pd(C00,c00);
        c10 = _mm_mul_pd(A0[59],B0[11]); C10 = _mm_add_pd(C10,c10);
        c01 = _mm_mul_pd(A0[43],B0[27]); C01 = _mm_add_pd(C01,c01);
        c11 = _mm_mul_pd(A0[59],B0[27]); C11 = _mm_add_pd(C11,c11);

        c00 = _mm_mul_pd(A0[42],B0[10]); C00 = _mm_add_pd(C00,c00);
        c10 = _mm_mul_pd(A0[58],B0[10]); C10 = _mm_add_pd(C10,c10);
        c01 = _mm_mul_pd(A0[42],B0[26]); C01 = _mm_add_pd(C01,c01);
        c11 = _mm_mul_pd(A0[58],B0[26]); C11 = _mm_add_pd(C11,c11);

        c00 = _mm_mul_pd(A0[41],B0[ 9]); C00 = _mm_add_pd(C00,c00);
        c10 = _mm_mul_pd(A0[57],B0[ 9]); C10 = _mm_add_pd(C10,c10);
        c01 = _mm_mul_pd(A0[41],B0[25]); C01 = _mm_add_pd(C01,c01);
        c11 = _mm_mul_pd(A0[57],B0[25]); C11 = _mm_add_pd(C11,c11);

        c00 = _mm_mul_pd(A0[40],B0[ 8]); C00 = _mm_add_pd(C00,c00);
        c10 = _mm_mul_pd(A0[56],B0[ 8]); C10 = _mm_add_pd(C10,c10);
        c01 = _mm_mul_pd(A0[40],B0[24]); C01 = _mm_add_pd(C01,c01);
        c11 = _mm_mul_pd(A0[56],B0[24]); C11 = _mm_add_pd(C11,c11);

        c00 = _mm_mul_pd(A0[39],B0[ 7]); C00 = _mm_add_pd(C00,c00);
        c10 = _mm_mul_pd(A0[55],B0[ 7]); C10 = _mm_add_pd(C10,c10);
        c01 = _mm_mul_pd(A0[39],B0[23]); C01 = _mm_add_pd(C01,c01);
        c11 = _mm_mul_pd(A0[55],B0[23]); C11 = _mm_add_pd(C11,c11);

        c00 = _mm_mul_pd(A0[38],B0[ 6]); C00 = _mm_add_pd(C00,c00);
        c10 = _mm_mul_pd(A0[54],B0[ 6]); C10 = _mm_add_pd(C10,c10);
        c01 = _mm_mul_pd(A0[38],B0[22]); C01 = _mm_add_pd(C01,c01);
        c11 = _mm_mul_pd(A0[54],B0[22]); C11 = _mm_add_pd(C11,c11);

        c00 = _mm_mul_pd(A0[37],B0[ 5]); C00 = _mm_add_pd(C00,c00);
        c10 = _mm_mul_pd(A0[53],B0[ 5]); C10 = _mm_add_pd(C10,c10);
        c01 = _mm_mul_pd(A0[37],B0[21]); C01 = _mm_add_pd(C01,c01);
        c11 = _mm_mul_pd(A0[53],B0[21]); C11 = _mm_add_pd(C11,c11);

        c00 = _mm_mul_pd(A0[36],B0[ 4]); C00 = _mm_add_pd(C00,c00);
        c10 = _mm_mul_pd(A0[52],B0[ 4]); C10 = _mm_add_pd(C10,c10);
        c01 = _mm_mul_pd(A0[36],B0[20]); C01 = _mm_add_pd(C01,c01);
        c11 = _mm_mul_pd(A0[52],B0[20]); C11 = _mm_add_pd(C11,c11);

        c00 = _mm_mul_pd(A0[35],B0[ 3]); C00 = _mm_add_pd(C00,c00);
        c10 = _mm_mul_pd(A0[51],B0[ 3]); C10 = _mm_add_pd(C10,c10);
        c01 = _mm_mul_pd(A0[35],B0[19]); C01 = _mm_add_pd(C01,c01);
        c11 = _mm_mul_pd(A0[51],B0[19]); C11 = _mm_add_pd(C11,c11);

        c00 = _mm_mul_pd(A0[34],B0[ 2]); C00 = _mm_add_pd(C00,c00);
        c10 = _mm_mul_pd(A0[50],B0[ 2]); C10 = _mm_add_pd(C10,c10);
        c01 = _mm_mul_pd(A0[34],B0[18]); C01 = _mm_add_pd(C01,c01);
        c11 = _mm_mul_pd(A0[50],B0[18]); C11 = _mm_add_pd(C11,c11);

        c00 = _mm_mul_pd(A0[33],B0[ 1]); C00 = _mm_add_pd(C00,c00);
        c10 = _mm_mul_pd(A0[49],B0[ 1]); C10 = _mm_add_pd(C10,c10);
        c01 = _mm_mul_pd(A0[33],B0[17]); C01 = _mm_add_pd(C01,c01);
        c11 = _mm_mul_pd(A0[49],B0[17]); C11 = _mm_add_pd(C11,c11);

        c00 = _mm_mul_pd(A0[32],B0[ 0]); d00.xm = _mm_add_pd(C00,c00);
        c10 = _mm_mul_pd(A0[48],B0[ 0]); d10.xm = _mm_add_pd(C10,c10);
        c01 = _mm_mul_pd(A0[32],B0[16]); d01.xm = _mm_add_pd(C01,c01);
        c11 = _mm_mul_pd(A0[48],B0[16]); d11.xm = _mm_add_pd(C11,c11);

        Maybe<add>::add(C0[ 2] , x * (d00.xd[0] + d00.xd[1]));
        Maybe<add>::add(C0[ 3] , x * (d10.xd[0] + d10.xd[1]));
        Maybe<add>::add(C0[18] , x * (d01.xd[0] + d01.xd[1]));
        Maybe<add>::add(C0[19] , x * (d11.xd[0] + d11.xd[1]));

        A0 += 64;
        C0 += 4;
      } while (--i2);
      A0 -= 256;
      B0 += 32;
      C0 += 16; 
    } while (--j2);
  }
#else
  // If no SSE2, then repeat the 16 block version to call generic.
  template <int ix>
  TMV_STATIC void multmm_16_16_16(const Scaling<ix,double>& x,
      const double* A, const double* B, double* C0)
  { generic_multmm_16_16_16(x,A,B,C0); }
#endif

#endif // End double

#if !defined(TMV_CompilingLibrary) && defined(TMV_INST_INT)

  template <int ix>
  void multmm_16_16_16(const Scaling<ix,int>& x,
      const int* A, const int* B, int* C0);

#elif \
  (defined(TMV_CompilingLibrary) && defined(TMV_INST_INT)) || \
  (!defined(TMV_CompilingLibrary) && !defined(TMV_INST_INT)) 

  template <int ix>
  TMV_STATIC void multmm_16_16_16(const Scaling<ix,int>& x,
      const int* A, const int* B, int* C0)
  { generic_multmm_16_16_16(x,A,B,C0); }

#endif // End int

#if !defined(TMV_CompilingLibrary) && defined(TMV_INST_LONGDOUBLE)

  template <long double ix>
  void multmm_16_16_16(const Scaling<ix,long double>& x,
      const long double* A, const long double* B, long double* C0);

#elif \
  (defined(TMV_CompilingLibrary) && defined(TMV_INST_LONGDOUBLE)) || \
  (!defined(TMV_CompilingLibrary) && !defined(TMV_INST_LONGDOUBLE)) 

  template <int ix>
  TMV_STATIC void multmm_16_16_16(const Scaling<ix,long double>& x,
      const long double* A, const long double* B, long double* C0)
  { generic_multmm_16_16_16(x,A,B,C0); }

#endif // End long double

#undef TMV_STATIC 

} // namespace tmv

#endif 
