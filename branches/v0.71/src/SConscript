# vim: set filetype=python :

import os

Import('env')

ReadFileList=env['__readfunc']

# Source lists
basic = ReadFileList('basic.files')
basic_noint = ReadFileList('basic_noint.files')
basic_omp = ReadFileList('basic_omp.files')
basic_omp_noint = ReadFileList('basic_omp_noint.files')
basic_geqp3 = ReadFileList('basic_geqp3.files')
diag = ReadFileList('diag.files')
tri = ReadFileList('tri.files')
tri_noint = ReadFileList('tri_noint.files')

band = ReadFileList('band.files')
band_noint = ReadFileList('band_noint.files')
sym = ReadFileList('sym.files')
sym_noint = ReadFileList('sym_noint.files')
sym_omp_noint = ReadFileList('sym_omp_noint.files')
sym_stegr = ReadFileList('sym_stegr.files')
symband = ReadFileList('symband.files')
symband_noint = ReadFileList('symband_noint.files')

lib_files= basic + diag + tri
lib_noint_files= basic_noint + tri_noint
lib_omp_files= basic_omp
lib_omp_noint_files= basic_omp_noint
lib_geqp3_files= basic_geqp3
sblib_files= band + sym + symband
sblib_noint_files= band_noint + sym_noint + symband_noint
sblib_omp_noint_files= sym_omp_noint
sblib_stegr_files= sym_stegr



env1 = env.Clone()

if env['MEM_TEST']:
    print 'Using mmgr.cpp'
    lib_files += ['mmgr.cpp']

if env['NAN_TEST']:
    env1.Append(CPPDEFINES=['TMV_INITIALIZE_NAN'])
if not env['INST_FLOAT']:
    env1.Append(CPPDEFINES=['NO_INST_FLOAT'])
if not env['INST_DOUBLE']:
    env1.Append(CPPDEFINES=['NO_INST_DOUBLE'])
if env['INST_LONGDOUBLE'] or env['TEST_LONGDOUBLE']:
    env1.Append(CPPDEFINES=['INST_LONGDOUBLE'])

env2 = env1.Clone()

if env['INST_INT'] or env['TEST_INT']:
    env1.Append(CPPDEFINES=['INST_INT'])

env3 = env1.Clone()
env4 = env2.Clone()
if env['WITH_OPENMP'] :
    env3.Append(CCFLAGS=env['OMP_FLAGS'])
    env4.Append(CCFLAGS=env['OMP_FLAGS'])

env5 = env2.Clone()
if env['LAP'] :
    if not env['USE_GEQP3']:
        env5.Append(CPPDEFINES=['NOGEQP3'])

env6 = env2.Clone()
if env['LAP'] :
    if not env['USE_STEGR']:
        env6.Append(CPPDEFINES=['NOSTEGR'])

if env['SHARED']:

    obj_lib = env1.SharedObject(lib_files)
    obj_noint_lib = env2.SharedObject(lib_noint_files)
    obj_omp_lib = env3.SharedObject(lib_omp_files)
    obj_omp_noint_lib = env4.SharedObject(lib_omp_noint_files)
    obj_geqp3_lib = env5.SharedObject(lib_geqp3_files)

    obj_sblib = env1.SharedObject(sblib_files)
    obj_noint_sblib = env2.SharedObject(sblib_noint_files)
    obj_omp_noint_sblib = env4.SharedObject(sblib_omp_noint_files)
    obj_stegr_sblib = env6.SharedObject(sblib_stegr_files)

    env7 = env1.Clone()
    env7.Prepend(LIBS=['tmv'])

    # Some stuff to get it to set the right library name and compatibility version:
    lines = os.popen(os.path.join('..','bin','tmv-version')).readlines()
    print 'lines = ',lines
    version_numbers = lines[0].strip().split('.')
    print 'version_numbers = ',version_numbers
    compat_version_numbers = version_numbers
    # TODO: Currently, I manually set the compatibility version when less than
    # the current version.  Any way to automate this?
    compat_version_numbers[1] = '70'
    print 'compat_version_numbers = ',compat_version_numbers
    if 'install' in COMMAND_LINE_TARGETS: 
        lib_final_dir = os.path.join(env['FINAL_PREFIX'],'lib')
    else:
        lib_final_dir = os.path.join(GetBuildPath('#lib'))
    lib_final_name = os.path.join(lib_final_dir,'libtmv.dylib')
    sblib_final_name = os.path.join(lib_final_dir,'libtmv_symband.dylib')

    if env['PLATFORM'] == 'darwin':
        env1.AppendUnique( SHLINKFLAGS=[
	    '-dynamic',
	    '-Wl,-install_name,%s'%lib_final_name,
	    '-Wl,-compatibility_version,%s.%s'%tuple(compat_version_numbers),
	    '-Wl,-current_version,%s.%s'%tuple(version_numbers) ] )
        env7.AppendUnique( SHLINKFLAGS=[
	    '-dynamic',
	    '-Wl,-install_name,%s'%sblib_final_name,
	    '-Wl,-compatibility_version,%s.%s'%tuple(compat_version_numbers),
	    '-Wl,-current_version,%s.%s'%tuple(version_numbers) ] )
    if env['PLATFORM'] == 'linux2':
         env1.AppendUnique( SHLINKFLAGS=[
	    '-Wl,-soname,%s'%lib_final_name ])
         env7.AppendUnique( SHLINKFLAGS=[
	    '-Wl,-soname,%s'%sblib_final_name ])

    lib = env1.SharedLibrary(
            os.path.join('#lib','tmv'),
	    obj_lib + obj_noint_lib + obj_omp_lib + obj_omp_noint_lib + obj_geqp3_lib)
    sblib = env7.SharedLibrary(
            os.path.join('#lib','tmv_symband'),
	    obj_sblib + obj_noint_sblib + obj_omp_noint_sblib + obj_stegr_sblib)

else:
    obj_lib = env1.StaticObject(lib_files)
    obj_noint_lib = env2.StaticObject(lib_noint_files)
    obj_omp_lib = env3.StaticObject(lib_omp_files)
    obj_omp_noint_lib = env4.StaticObject(lib_omp_noint_files)
    obj_geqp3_lib = env5.StaticObject(lib_geqp3_files)

    obj_sblib = env1.StaticObject(sblib_files)
    obj_noint_sblib = env2.StaticObject(sblib_noint_files)
    obj_omp_noint_sblib = env4.StaticObject(sblib_omp_noint_files)
    obj_stegr_sblib = env6.StaticObject(sblib_stegr_files)

    lib = env1.StaticLibrary(
            os.path.join('#lib','tmv'),
	    obj_lib + obj_noint_lib + obj_omp_lib + obj_omp_noint_lib + obj_geqp3_lib)
    sblib = env1.StaticLibrary(
            os.path.join('#lib','tmv_symband'),
	    obj_sblib + obj_noint_sblib + obj_omp_noint_sblib + obj_stegr_sblib)

all_obj_files = \
    obj_lib + obj_noint_lib + obj_omp_lib + \
    obj_omp_noint_lib + obj_geqp3_lib + \
    obj_sblib + obj_noint_sblib + \
    obj_omp_noint_sblib + obj_stegr_sblib

# Note: this next bit depends on the object files being in the src directory.
# If this ever changes, I'll need to do something different to get the name
# of the corresponding inst file.
for objfile in all_obj_files:
    inst = os.path.splitext(str(objfile))[0] + '.inst'
    Depends(objfile,inst)

env.Alias(target='lib', source=lib)
env.Alias(target='sblib', source=sblib)

#
# install/uninstall
#

lib_targets = [lib,sblib]

Default(lib_targets)

# Add the prefix to the installation directories
lib_install_dir = os.path.join(env['INSTALL_PREFIX'],'lib')
header_install_dir = os.path.join(env['INSTALL_PREFIX'],'include')
header_install_dir_sub = os.path.join(env['INSTALL_PREFIX'],'include','tmv')

lib_file = '#' + lib[0].path
sblib_file = '#' + sblib[0].path

# Save this info for share/SConscript
env['LIB_FILE_NAMES'] = [lib_file,sblib_file]

if 'install' in COMMAND_LINE_TARGETS: 

    if env['SHARED']:
        installed_lib = env1.Install(dir=lib_install_dir, source=lib)
        env.Depends(sblib,installed_lib)
        installed_sblib = env1.Install(dir=lib_install_dir, source=sblib)
        env.Alias(target='install', source=[installed_lib,installed_sblib])

    else :
        env.Alias(target='install', 
	    source=env1.Install(dir=lib_install_dir, source=lib_targets))

    hfiles1 = []
    hfiles = os.listdir(GetBuildPath(os.path.join('#include','tmv')))
    for f in hfiles:
	if f[0:3] == 'TMV':
            hfiles1 += [os.path.join('#include','tmv',f)]
    installed_h = env1.Install(dir=header_install_dir_sub, source=hfiles1)
    env.Alias(target='install', source=installed_h)

    hfiles2 = []
    hfiles = os.listdir(GetBuildPath(os.path.join('#include')))
    for f in hfiles:
	if f[0:3] == 'TMV':
            hfiles2 += [os.path.join('#include',f)]
    installed_h = env1.Install(dir=header_install_dir, source=hfiles2)
    env.Alias(target='install', source=installed_h)

if 'uninstall' in COMMAND_LINE_TARGETS:
    # There is no env.Uninstall method, we must build our own
    deltarget = Delete("$TARGET")

    # delete lib/*tmv.a files
    libfiles = [os.path.join(lib_install_dir, os.path.basename(str(f[0]))) for f in lib_targets]

    for f in libfiles:
        env.Alias('uninstall', env1.Command(f, None, deltarget))

    # Delete files from include/tmv
    hfiles1 = os.listdir(GetBuildPath(os.path.join('#include','tmv')))
    for f in hfiles1:
	if f[0:3] == 'TMV':
	    cmd = env1.Command(os.path.join(header_install_dir_sub,f), None, deltarget)
            env.Alias('uninstall',cmd)

    # Delete include/tmv subdirectory
    env.Alias('uninstall', env1.Command(header_install_dir_sub, None, deltarget))

    # Delete include/*.h files
    hfiles2 = os.listdir(GetBuildPath('#include'))
    for f in hfiles2:
	if f[0:3] == 'TMV':
	    cmd = env1.Command(os.path.join(header_install_dir,f), None, deltarget)
            env.Alias('uninstall',cmd)


