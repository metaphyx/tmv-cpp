Changes from version 0.70 to 0.71:  
(See the History section in the full documentation for changes from previous
versions to 0.70.)

This release is the first one to be included in fink.  So on a Mac, if you 
use fink, you can now just type: 

fink install tmv

to install tmv in /sw/lib and /sw/include.

However, the process of getting this to happen required a few minor changes
to the SCons files.  I also learned a few SCons tricks that I've incorporated
as well.

This release is completely backwards compatible as far as the header files
and library are concerned, since nothing there has changed.  The only 
changes are in the build process.

-- Added a new SCons parameter FINAL_PREFIX.  This was needed for fink to 
   get the tmv-link file correct.  It installs everything into a temporary
   directory, and then only once everything has installed correctly does
   it copy everything to the /sw/* directories.  This is generally fine,
   except that the temporary directory was being used in the tmv-link
   file rather than the final installation directory.  So I added this
   parameter so I could tell SCons to use this value instead.

-- Moved the tmv-link file from PREFIX/share/tmv-link to the fink 
   recommended location PREFIX/share/tmv/tmv-link.  So if you use the 
   tmv-link file, you'll want to change your makefile or build script to 
   use the new location.

-- Added a SCons flag IMPORT_PREFIX which specifies whether to use 
   PREFIX/include and PREFIX/lib in the search paths.  The default is true,
   which matches the old behavior, but for fink I needed to be able to 
   turn that off.

-- Added a new feature that scons will now automatically try to determine 
   how many cpus your system has and use that for the number of build jobs 
   to run at once.  Usually, this is a good choice, but if you don't want
   it, you can override this in two ways:

   1) There is a new SCons flag N_BUILD_THREADS which you can set.
      The default value 0 here indicates to use the number of cpus.

   2) scons -jN will always override either of these and use N jobs.

-- Fixed up naming of a shared library on OSX.  OSX doesn't use the normal
   RPATH stuff in an executable to indicate where a shared library is located.
   Instead it stores the path name in the shared library itself, and then
   when building an executable, it copies that location into the executable
   so it knows where to look at run time.

   Well, TMV wasn't getting the name of the shared library correct before,
   so this wasn't working.  I fixed that, so now programs compiled with a 
   TMV shared library should run correctly without having to set
   LD_LIBRARY_PATH explicitly.

-- Added flags to include the rpath for linux compilations.  Unlike OSX,
   linux builds use some flags at link time to put the location of shared 
   libraries into the executable.  I've added these flags to the flags in
   the tmv-link file, so this should now happen automatically for you.

-- Changed the default value of SHARED to true.  So the default will be
   to create a shared library (libtmv.so, libtmv.dylib, etc.) rather than a 
   static library (libtmv.a).  If you need a static library, you now need
   to explicitly set this to false.

   I made this change, mostly because I learned about some SCons features
   that let me include the RPATH stuff in the tmv-link file which makes it
   easier to deal with using TMV as a shared library.

-- Removed a few files from the list of installed files.  They are header 
   files that are only used during the build process, and shouldn't have 
   been installed.  If you want to remove them from your include directory
   from previous installations, they are:

   fblas.h
   flapack.h
   mmgr.h
   extra_mmgr.h
   nommgr.h
   tmv/portable_platform.h

