Changes from version 0.70 to 0.71:  
(See the History section in the full documentation for changes from previous
versions to 0.70.)

This release is the first one to be included in fink.  So on a Mac, if you 
use fink, you can now just type: 

fink install tmv

to install tmv in /sw/lib and /sw/include.

However, the process of getting this to happen required a few minor changes
to the SCons files.  I also learned a few SCons tricks that I've incorporated
as well.

This release is completely backwards compatible as far as the header files
and library are concerned, since nothing there has changed.  The only 
changes are in the build process.

-- Added a new SCons parameter FINAL_PREFIX.  This was needed for fink to 
   get the tmv-link file correct.  It installs everything into a temporary
   directory, and then only once everything has installed correctly does
   it copy everything to the /sw/* directories.  This is generally fine,
   except that the temporary directory was being used in the tmv-link
   file rather than the final installation directory.  So I added this
   parameter so I could tell SCons to use this value instead.

-- Changed the default value of SHARED to true.  So the default will be
   to create a shared library (libtmv.so, libtmv.dylib, etc.) rather than a 
   static library (libtmv.a).  If you need a static library, you now need
   to explicitly set this to false.

   I made this change, mostly because I learned about some SCons features
   that let me include the RPATH stuff in the tmv-link file which makes it
   easier to deal with using TMV as a shared library.

-- Now scons will automatically try to determine how many cpus your system 
   has and use that for the number of build jobs to run at once.
   You can override this by explicitly using -jN which will force scons to 
   use N build jobs.  

   If you want to use N=1, however, this doesn't work.  That's because 
   internally, "scons" and "scons -j1" are indistinguishable.  So if 
   the number of jobs is 1, then I am taking that to be the default 
   without a -j flag.  So there are two ways around this (which I consider
   a minor bug in SCons).  
   1) "scons -j0"  A little strange, but that will also do 1 job at a time, 
      and it won't be confused for the default.
   2) "scons SINGLE_BUILD_THREAD=true"  I added this new SCons flag 
      as a clearer way to specify that only a single thread should be used
      when building.

-- Fixed a bug in the way SCons builds shared libraries on OSX.  OSX doesn't 
   use the normal RPATH flags for telling an executable where its shared
   libraries live.  Instead it tags the shared library with its path, and 
   then puts that into the executable at link time.  Great.  However, 
   when SCons builds a shared library in OSX, it doesn't include the full
   path for the library.  So we have to use install_name_tool to rename
   the library.
