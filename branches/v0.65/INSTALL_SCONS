Note: More complete installation information is contained in 
doc/TMV_Documentation.pdf.  If the instructions there differ from these, 
then it is probably true that the pdf is correct, rather than this file.


First, see INSTALL for instructions on downloading and unpacking the 
tarball if you have not already done so.

This file give the instructions for installing TMV using the program SCons.


1. Make sure you have SCons installed on your system.  
   It is available for free from http://www.scons.org/.  
   (It is a very quick installation if you have Python installed.)

2. Type 

   scons
   
   This will make the libraries libtmv.a and libtmv_symband.a
   and put them into the directory lib.  Like with make, you can add
   the flag -j4 to use 4 (or whatever number of) compilers simultaneously.
   Also, the command scons -h will print some help information.

   Here are some parameters you might want to use:
   (See also the PDF documentation for still more options.)
   The default value if not specified is given after each parameter.
   These options are set by simply typing them on the command line.
   e.g. scons CXX=icpc WITH_LONGDOUBLE=true

       CXX=g++ specifies which C++ compiler to use.
       FLAGS='' specifies the basic flags to pass to the compiler.  
             The default behavior is to automatically choose good flags 
	     to use according to which kind of compiler you are using.
       DEBUG=false specifies whether to keep the debugging assert statements 
             in the compiled library code.  
       PREFIX=/usr/local specifies where to install the library when running 
             scons install (see below).
       INST_FLOAT=true specifies whether to instantiate the <float> templates.
       INST_DOUBLE=true specifies whether to instantiate the <double> 
             templates.
       INST_LONGDOUBLE=false specifies whether to instantiate the <long double> 
             templates.
       INST_INT=false specifies whether to instantiate the <int> templates.
       WITH_OPENMP=true specifies whether to use OpenMP to parallelize some 
             parts of the code.
       SHARED=false specifies whether to make the library files shared as 
             opposed to static libraries.
   
       IMPORT_ENV=false specifies whether to import the entire environment 
             from the calling shell.  The default is to start with a clean 
	     environment to be less susceptible to a particular user having an 
	     unusual set up.  But sometimes sysadmins set things up in 
	     non-standard ways and use the environment variables to make 
	     everything work.  If this is the case, then IMPORT_ENV should do 
	     the trick.  It imports the environment, but doe not add any
             -I or -L flags when compiling.
       EXTRA_PATH='' specifies directories in which to search for executables 
             (notably the compiler, although you can also just give the full 
	     path in the CXX parameter) in addition to the standard locations 
	     such as /usr/bin and /usr/local/bin.  If you are giving multiple 
	     directories, they should be separated by colons.
       EXTRA_INCLUDE_PATH='' specifies directories in which to search for 
             header files (such as the BLAS or LAPACK header files)
             in addition to the standard locations such as /usr/include and 
	     /usr/local/include.  These directories are specified as -I flags 
	     to the compiler.  If you are giving multiple directories, they
	     should be separated by colons.
       EXTRA_LIB_PATH='' specifies directories in which to search for libraries
             (such as the BLAS or LAPACK libraries) in addition to the standard 
	     locations such as /usr/lib and /usr/local/lib.  These directories 
	     are specified as -L flags to the linker.  If you are giving 
	     multiple directories, they should be separated by colons.
       IMPORT_PATHS=false specifies whether to import extra path directories 
             from the environment variables: PATH, C_INCLUDE_PATH, 
	     LD_LIBRARY_PATH and LIBRARY_PATH.  
   
       WITH_BLAS=true specifies whether to look for and try to use a BLAS 
             library.
       WITH_LAPACK=true specifies whether to look for and try to use a 
             LAPACK library.
   
       FORCE_MKL=false forces the use of the Intel Math Kernel library.  
       FORCE_ACML=false forces the use of the AMD Core Math library.  
       FORCE_GOTO=false forces the use of the GotoBlas library.  
       FORCE_ATLAS=false forces the use of the ATLAS library (for BLAS).  
       FORCE_CBLAS=false forces the use of a CBLAS library.
       FORCE_FBLAS=false forces the use of a Fortran BLAS library.
       FORCE_CLAPACK=false forces the use of the CLAPACk library. 
       FORCE_ATLAS_LAPACK=false forces the use of the LAPACK portion
             of the ATLAS Library.  
       FORCE_FLAPACK=false forces the use of a Fortran LAPACK library.
       LIBS='' directly specifies the library flags to use for linking if
             the automatic methods aren't working for you.
   
   
3. (optional) Type
   
   scons test
   
   This will make the executables tmvtest1, tmvtest2 and tmvtest3 in
   the test directory.  Running each of these should output lines that 
   look like 
       [Something] passed all tests. 

   scons examples

   This will make some example programs, which showcase some of the 
   features of the TMV library.  They are in the examples directory,
   and may serve as a kind of tutorial for those who want to learn 
   how to use TMV.

   
4. (optional) Type

   scons install

   This will install the necessary header files into the directory 
   /usr/local/include and the libraries into /usr/local/lib.  
   As mentioned above, you can also specify a different prefix 
   with the command line option PREFIX=[install-dir], in which case
   $(PREFIX)/include and $(PREFIX)/lib will be used instead.
   

