
#define CT std::complex<T>

#define DefDiv(T,RT1,T1,T2)\
template void SV_LDiv(const GenMatrix<T1 >& U,\
    const GenDiagMatrix<RT1 >& S, const GenMatrix<T1 >& V, const int kmax, \
    const GenMatrix<T2 >& m, const MatrixView<T >& x); \
template void SV_RDiv(const GenMatrix<T1 >& U,\
    const GenDiagMatrix<RT1 >& S, const GenMatrix<T1 >& V, const int kmax, \
    const GenMatrix<T2 >& m, const MatrixView<T >& x); \

DefDiv(T,T,T,T)
#ifdef INST_COMPLEX
DefDiv(CT,T,T,T)
DefDiv(CT,T,T,CT)
DefDiv(CT,T,CT,T)
DefDiv(CT,T,CT,CT)
#endif

#undef DefDiv

#define DefDiv(T,RT1,T1,T2)\
template <> void SV_LDiv(const GenMatrix<T1 >& ,\
    const GenDiagMatrix<RT1 >& , const GenMatrix<T1 >& , const int , \
    const GenMatrix<T2 >& , const MatrixView<T >& ) \
    { TMVAssert(TMV_FALSE); } \
template <> void SV_RDiv(const GenMatrix<T1 >& ,\
    const GenDiagMatrix<RT1 >& , const GenMatrix<T1 >& , const int , \
    const GenMatrix<T2 >& , const MatrixView<T >& ) \
    { TMVAssert(TMV_FALSE); } \

#ifdef INST_COMPLEX
DefDiv(T,T,CT,CT)
DefDiv(T,T,CT,T)
DefDiv(T,T,T,CT)
#endif

#undef DefDiv

#undef CT

