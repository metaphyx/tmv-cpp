
#define CT std::complex<T>

#define Def1a(RT,T,D)\
  template T InstSumElements(const ConstUpperTriMatrixView<T,D>& m); \
  template RT InstSumAbsElements(const ConstUpperTriMatrixView<T,D>& m); \
  template RT InstSumAbs2Elements(const ConstUpperTriMatrixView<T,D>& m); \
  template RT InstNormSq(const ConstUpperTriMatrixView<T,D>& m);  \
  template RT InstNormSq(const ConstUpperTriMatrixView<T,D>& m, \
      const RT scale);  \
  template RT InstMaxAbsElement(const ConstUpperTriMatrixView<T,D>& m);  \
  template RT InstNormF(const ConstUpperTriMatrixView<T,D>& m);  \
  template RT InstNorm1(const ConstUpperTriMatrixView<T,D>& m);  \
  template RT InstNormInf(const ConstUpperTriMatrixView<T,D>& m);  \

#define Def1(RT,T)\
  Def1a(RT,T,UnknownDiag)

Def1(T,T)
#ifdef TMV_INST_COMPLEX
Def1(T,CT)
#endif

#define Def2a(T,D,C) \
  template void InstSwap(UpperTriMatrixView<T,D,UNKNOWN,UNKNOWN,C> m1, \
      UpperTriMatrixView<T,D> m2); \
  template void InstWriteCompact(std::ostream& os, \
      const ConstUpperTriMatrixView<T,D,UNKNOWN,UNKNOWN,C>& m1); \
  template void InstRead(std::istream& is, \
      UpperTriMatrixView<T,D,UNKNOWN,UNKNOWN,C> m1); \
  template void InstWriteCompact(std::ostream& os, \
      const ConstLowerTriMatrixView<T,D,UNKNOWN,UNKNOWN,C>& m1); \
  template void InstRead(std::istream& is, \
      LowerTriMatrixView<T,D,UNKNOWN,UNKNOWN,C> m1); \

#define Def2(T,C) \
  Def2a(T,UnknownDiag,C)

Def2(T,false)
#ifdef TMV_INST_COMPLEX
Def2(CT,false)
Def2(CT,true)
#endif


#define Def3a(T1,D1,C,T2,D2) \
  template void InstCopy(\
      const ConstUpperTriMatrixView<T1,D1,UNKNOWN,UNKNOWN,C>& m1, \
      UpperTriMatrixView<T2,D2> m2); \

#define Def3(T1,C,T2) \
  Def3a(T1,UnknownDiag,C,T2,UnknownDiag)

Def3(T,false,T)
#ifdef TMV_INST_COMPLEX
#ifdef TMV_INST_MIX
Def3(T,false,CT)
#endif
Def3(CT,false,CT)
Def3(CT,true,CT)
#endif

#undef Def1a
#undef Def1
#undef Def2a
#undef Def2
#undef Def3a
#undef Def3

#undef CT

