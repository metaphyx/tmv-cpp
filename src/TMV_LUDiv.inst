
#define CT std::complex<T>

#define DefDivEq(T,T1)\
  template void LU_LDivEq(const GenMatrix<T1 >& A,\
      const int* P, const MatrixView<T >& b); \
  template void LU_RDivEq(const GenMatrix<T1 >& A,\
      const int* P, const MatrixView<T >& b); \

DefDivEq(T,T)
#ifdef INST_COMPLEX
DefDivEq(CT,T)
DefDivEq(CT,CT)
#endif

#undef DefDivEq

#define DefDivEq(T,T1)\
  template <> void LU_LDivEq(const GenMatrix<T1 >& ,\
      const int* , const MatrixView<T >& )\
      { TMVAssert(FALSE); }\
  template <> void LU_RDivEq(const GenMatrix<T1 >& ,\
      const int* , const MatrixView<T >& )\
      { TMVAssert(FALSE); }\

#ifdef INST_COMPLEX
DefDivEq(T,CT)
#endif

#undef DefDivEq

#undef CT
