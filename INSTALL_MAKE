Note: More complete installation information is contained in 
doc/TMV_Documentation.pdf.  If the instructions there differ from these, 
then it is probably true that the pdf is correct, rather than this file.


First, see INSTALL for instructions on downloading and unpacking the 
tarball if you have not already done so.

This file give the instructions for installing TMV using the program make.


1. Edit Makefile:

   The start of the Makefile lists 5 things to specify: the compiler,
   the include directories, the other flags to send to the compiler,
   any necessary BLAS/LAPACK linkage flags, and the installation
   directory.  The default setup is:

   CC= g++
   INCLUDE= -Iinclude
   CFLAGS= $(INCLUDE) -O -DNOBLAS -DNDEBUG
   BLASLIBS= 
   PREFIX=/usr/local

   but you will probably want to change this.  This default setup will
   compile using g++ without any BLAS or LAPACK library and with 
   debugging turned off.  This setup should work on any system with
   gcc, although it almost certainly won't be as fast as using an 
   optimized BLAS library and/or a LAPACK library.

   You should edit these so that:

   CC specifies the C++ compiler to use.
   INCLUDE specifies the directories for any BLAS and LAPACK header
     files you want to include.  (You should leave -Iinclude in there as well.)
   CFLAGS contains any compiler flags you want.  (See below for TMV-specific
     flags to consider.)
   TESTCFLAGS contains the flags you want for the test suite code.
   BLASLIBS specifies the libraries required for linking you BLAS and LAPACK 
     libraries.
   PREFIX specifies the directory for "make install" to copy the files to.

   For CFLAGS, there are a number of -D defines that you may want to use in 
   addition to any optimization parameters like -fast, -O, etc.
   A comprehensive list is provided in the pdf documentation.

   In particular, there are flags to control which types to instantiate 
   for the compiled functions.  The default is to instantiate functions
   for double and float (and their corresponding complex varieties).

     -DNO_INST_FLOAT -- Don't instantiate float or complex<float>
     -DNO_INST_DOUBLE -- Don't instantiate double or complex<double>
     -DNO_INST_COMPLEX -- Don't instantiate any complex types
     -DINST_INT -- Instantiate int and complex<int>
     -DINST_LONGDOUBLE -- Instantiate long double and complex<long double>

   Also, there are some flags to specify some popular BLAS/LAPACK options:

     -DCBLAS -- Use a CBlas Library
     -DFBLAS -- Use a Fortran Blas Library
     -DATLAS -- Use the ATLAS Blas Library
     -DMKL -- Use Intel's Math Kernel Library for BLAS/LAPACK
     -DACML -- Use the AMD Core Math Library for BLAS/LAPACK
     -DCLAPACK -- Use the CLAPACK Library
     -DFLAPACK -- Use a Fortran LAPACK Library
     -DNOBLAS -- Do not use any external BLAS library
     -DNOLAP -- Do not use any external LAPACK library

   Some concrete examples are also included in the Makefile below
   the top few lines.  e.g. For a system with the Intel Math Kernel
   Library, where you want to use TMV with long double in addition to
   the default float and double you might want to use the lines:

   CC= icpc
   INCLUDE= -Iinclude -I/usr/local/include
   CFLAGS= $(INCLUDE) -O3 -DNDEBUG -DMKL -DINST_LONGDOUBLE
   BLASLIBS= -lmkl_lapack -lmkl_ia32 -lguide 

   Other examples are given as well, although the exact -l linkages
   to use will vary from system to system, so use whatever is appropriate
   for your paricular setup.


2. (Advanced ussage) Edit the Inst and Blas files if necessary.

   By default, the library will include instantiations of all classes and 
   functions that use either double or float (including complex versions 
   of each).  There are a few flags, such as -DNO_INST_FLOAT and 
   -DINST_LONGDOUBLE, that change this as described above.
   But if you want to compile routines for some other class, such as a 
   user-defined MyQuadPrecisionType class, then you will need to modify 
   the file src/TMV_Inst.h.  You simply need to add the lines:

   #define T MyQuadPrecisionType
   #include InstFile
   #undef T

   to the end of the file before compiling.  (Obviously, you should
   replace MyQuadPrecisionType with whatever type you want to be 
   instantiated in the library.)

   Also, the file src/TMV_Blas.h sets up all the BLAS and LAPACK 
   calling structures, as well as the necessary #include statements.  
   So if the BLAS or LAPACK options aren't working for your system,
   you may need to edit these files as well.  This is especially true 
   if your BLAS or LAPACK versions are not one of ATLAS, CLAPACK, 
   FLAPACK, MKL, or ACML.  The comments at the beginning of 
   TMV_Blas.h gives instructions on how to set up the file for 
   other installations.


3. Type:

     make 

   to make the libraries libtmv.a and libtmv_symband.a which will be 
   located in the directory lib.

   Then type:

     make install

   (or possibly "sudo make install" if you are installing into /usr/local
   or somewhere similar).  This will copy all the header files 
   to [PREFIX]/include and the library files to [PREFIX]/lib.  

   The default PREFIX is /usr/local, but this can be changed
   to some other installation directory as described above.  


4. (Optional) Type:

     make test

   to make the test suite executables:
   
     test/tmvtest1
     test/tmvtest2
     test/tmvtest3

   If you want to make the smaller test executables instead, you can type:

     make smalltest

   to make the executables:

     test/tmvtest1a
     test/tmvtest1b
     test/tmvtest1c
     test/tmvtest1d
     test/tmvtest2a
     test/tmvtest2b
     test/tmvtest2c
     test/tmvtest3a
     test/tmvtest3b
     test/tmvtest3c
     test/tmvtest3d
     test/tmvtest3e

   They should each compile successfully, and when you run them, they 
   should output a bunch of lines that end with "...passed all tests"
   (or similar).  If not, see the documantation (doc/TMV_Documentation.pdf) 
   for how to submit a bug report.
 
5. (Optional) Type:

     make examples

   to make the executables:

     examples/vector
     examples/matrix
     examples/division
     examples/bandmatrix
     examples/symmatrix

   These programs, along with their corresponding source code in the 
   examples directory, give concrete examples of some of the common 
   things you might want to do with the TMV library.  They don't really 
   try to be comprehensive, but they do give a pretty good overview of the 
   main features, so looking at them may be a useful way to get started 
   programming with TMV.


6. Compile your own program:

   Each .cpp file that uses the TMV library will need to have

   #include "TMV.h"

   at the top.  Furthermore, if you are using band, symmetric or hermitian
   matrices, you will need to include their particular files as well:

   #include "TMV_Band.h"
   #include "TMV_Sym.h"
   #include "TMV_SymBand.h"

   Also, you will need to compile with -I[PREFIX]/include,
   and also link with 

   -L[PREFIX]/lib -ltmv

   where [PREFIX] is the directory where you installed the libraries
   as specified at the top of the Makefile.
   Of course, if you installed the libraries and header files to a directory 
   in your path, then you do not need the -I and -L flags.

   If you use and banded or symmetric/hermitian matrices, then you will
   need to link with the flags -ltmv_symband -ltmv.

   And if you are using BLAS and/or LAPACK calls from the TMV code,
   then you will also need to link with whatever libraries
   you specified for TMV to use.

   To help you out with this, the command "make install" will create a file:

     [PREFIX]/share/tmv-link

   which gives the necessary linking flags to use.

   If you are using a makefile to compile your program, you can make 
   sure to automatically use the correct flags by using lines such as:

     TMVLINK := $(shell cat /usr/local/share/tmv-link)
     LIBS = $(TMVLINK) [... other libs ...]

   (Obviously change the to the correct file if your PREFIX is not /usr/local.)

   Also, the tmv-link file does not include the -ltmv_symband flag, so if you
   are using symmetric and/or banded matrices, make sure to add that before
   $(TMVLINK).

